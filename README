==== Install development tools ====

Juju Charm build tools:
 sudo snap install charm --classic

Other tools:
 sudo apt install -y cmake yamllint

OSM Information Model (IM) packages:
 RELEASE=ReleaseEIGHT   # !!! Update release here !!!
 REPOSITORY=stable      # !!! Update repository here !!!
 sudo apt-key adv --recv-key 6112814124E7559F
 sudo add-apt-repository -y "deb [arch=amd64] https://osm-download.etsi.org/repository/osm/debian/${RELEASE} ${REPOSITORY} IM devops"
 sudo apt-get update
 sudo apt-get install -y python-osm-im osm-devops



==== Create instances ====

------ 1 Core setup, as in the OpenAirInterface example ------

./create-instance SimulaMet-OAI-EPC.yaml

Helper scripts: sshA1 ... sshA4 for SSH to HSS, MME, SPGW-C and SPGW-U


------ 2 Cores Mosaic5G setup ------

./create-instance SimulaMet-Mosaic5G-EPC-Core1.yaml
./create-instance SimulaMet-Mosaic5G-EPC-Core2.yaml
./create-instance SimulaMet-FlexRAN.yaml

Helper scripts:
* sshB1a ... sshB4a for SSH to HSS, MME, SPGW-C and SPGW-U of Core #1
* sshB1b ... sshB4b for SSH to HSS, MME, SPGW-C and SPGW-U of Core #2
* sshF for SSH to FlexRAN Controller


------ 1 Core setup for CloudRAN demo scenario ------

./create-instance SimulaMet-CloudRAN.yaml

Helper scripts: sshC1 ... sshC4 for SSH to HSS, MME, SPGW-C and SPGW-U



==== If something goes wrong: debugging commands ====

* Simple check for failed Juju actions:

 ./show-failed-juju-actions

* Get Juju status:

   juju status

* SSH into Juju container of VDU:

   juju ssh <Unit>

   Unit is from "juju status".
   /var/log/juju/unit-* is the log file of the Charm.

* Get output of Juju actions:

   juju show-action-status

   juju show-action-output <ID>

   ID is from "juju show-action-status".
   The output contains the "message" of function_fail(), as well as stdout and stderr!

* If Juju fails to destroy the Juju model, blocking removal of a NS:

   juju list-models

   juju destroy-model --force -y <ID>

   Important: --force may be necessary of NS removal is blocking due to problems removing the Juju model.

# Acknowledgment

This research was conducted as part of the “Raksha: 5G Security for Critical Communications” project, funded by the Research Council of Norway under the "IKTPLUSS-IKT og digital innovasjon" program (grant agreement No. 312122), https://prosjektbanken.forskningsradet.no/en/project/FORISS/312122

