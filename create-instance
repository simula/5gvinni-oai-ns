#!/bin/bash -e
# =====================================================================
#     #######  #####          #     #   ###   #     # #     #   ###
#     #       #     #         #     #    #    ##    # ##    #    #
#     #       #               #     #    #    # #   # # #   #    #
#      #####  #  ####  #####  #     #    #    #  #  # #  #  #    #
#           # #     #          #   #     #    #   # # #   # #    #
#     #     # #     #           # #      #    #    ## #    ##    #
#      #####   #####             #      ###   #     # #     #   ###
# =====================================================================
#
# SimulaMet OpenAirInterface Evolved Packet Core VNF and NS
# Copyright (C) 2019-2023 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no

# ###### Print usage ########################################################
PROGRAM="$0"
VIM_ACCOUNT="simulamet-openstack"
function usage()
{
   echo >&2 "Usage: ${PROGRAM} parameter-file [parameter-file ...]"
   echo >&2 ""
   echo >&2 "Available parameter files in this directory:"
   parameterFiles=`git ls-files | cut -d/ -f1 | sort -u | grep -- ".yaml"`
   for parameterFile in ${parameterFiles} ; do
      echo >&2 " * ${parameterFile}"
   done
}


# ###### Main program #######################################################
if [ $# -lt 1 ] ; then
   usage
   exit 0
fi


# ====== Obtain list of all NSDs ===========================================
NSD_LIST=`git ls-files | cut -d/ -f1 | sort -u | grep "[_-]nsd$\\|[_-]ns$"`

# ------ Obtaining a mapping between NSD directory and NSD identifier =====
declare -A nsdIdentifierArray
declare -A nsdArray
declare -A nsdYamlFileArray
for nsd in ${NSD_LIST} ; do
   echo -en "${nsd}:\t"
   if [ -e "${nsd}/${nsd}.yaml" ] ; then
      nsdYamlName="${nsd}/${nsd}.yaml"
   elif [ -e "${nsd}/${nsd}d.yaml" ] ; then
      nsdYamlName="${nsd}/${nsd}d.yaml"
   else
      echo >&2 "ERROR: Unable to find YAML file for ${nsd}!"
      exit 1
   fi
   echo -en "(${nsdYamlName})\t"
   nsdIdentifier=`yq -r ".nsd.nsd[].id" ${nsdYamlName}`
   if [ "${nsdIdentifier}" == "" ] ; then
      echo >&2 "ERROR: Unable to find identifier for NSD ${nsd} in ${nsdYamlName}!"
      exit 1
   fi
   nsdIdentifierArray[${nsd}]="${nsdIdentifier}"
   nsdYamlFileArray[${nsd}]="${nsdYamlName}"
   nsdArray[${nsdIdentifier}]="${nsd}"

   echo "${nsdArray[${nsdIdentifier}]} <-> ${nsdIdentifierArray[${nsd}]}"
done


# ====== Obtain list of all VNFDs ===========================================
VNFD_LIST=`git ls-files | cut -d/ -f1 | sort -u | grep "vnfd$\\|vnf$"`

# ------ Obtaining a mapping between VNFD directory and VNFD identifier =====
declare -A vnfdIdentifierArray
declare -A vnfdArray
for vnfd in ${VNFD_LIST} ; do
   echo -en "${vnfd}:\t"
   if [ -e "${vnfd}/${vnfd}.yaml" ] ; then
      vnfdYamlName="${vnfd}/${vnfd}.yaml"
   elif [ -e "${vnfd}/${vnfd}d.yaml" ] ; then
      vnfdYamlName="${vnfd}/${vnfd}d.yaml"
   else
      echo >&2 "ERROR: Unable to find YAML file for ${vnfd}!"
      exit 1
   fi
   echo -en "${vnfdYamlName}\t"
   vnfdIdentifier=`yq -r ".vnfd.id" ${vnfdYamlName}`
   if [ "${vnfdIdentifier}" == "" ] ; then
      echo >&2 "ERROR: Unable to find identifier for VNFD ${vnfd} in ${vnfdYamlName}!"
      exit 1
   fi
   vnfdIdentifierArray[${vnfd}]="${vnfdIdentifier}"
   vnfdArray[${vnfdIdentifier}]="${vnfd}"

   echo "${vnfdArray[${vnfdIdentifier}]} <-> ${vnfdIdentifierArray[${vnfd}]}"
done


# ====== Handle parameter files =============================================
n=0
while [ $# -gt 0 ] ; do
   # ====== Get parameter file ==============================================
   parameterFile="$1"
   if [ ! -e "${parameterFile}" ] ; then
      echo >&2 "ERROR: Parameter file ${parameterFile} not found!"
      usage
      exit 1
   fi

   # ====== Extract NSD name from parameter file ============================
   ns=`echo "${parameterFile}" | sed -e "s/.yaml$//g"`
   nsdIdentifier=`grep -E '#! NSD ' ${parameterFile} | cut -d' ' -f3`
   if [ "${nsdIdentifier}" == "" ] ; then
      echo >&2 "ERROR: The parameter file does not mention the NS identifier! (#! NSD <identifier>)"
      exit 1
   fi
   nsd="${nsdArray[${nsdIdentifier}]}"
   if [ "$nsd" == "" ] ; then
      echo >&2 "ERROR: Unable to find NSD for identifier ${nsdIdentifier} in ( ${!nsdArray[@]} )!"
      exit 1
   fi
   nsdYamlFileName="${nsdYamlFileArray[${nsd}]}"
   vnfdIdentifierList=`grep "vnfd-id:" ${nsdYamlFileName} | sed -e "s/^.*://g" | sort -u | xargs`
   if [ "{$vnfdIdentifierList}" == "" ] ; then
      echo >&2 "ERROR: No VNFD-IDs found in NS ${nsd}!"
      exit 1
   fi

   echo "NS=${ns} NSD=${nsdIdentifier}->${nsd} vnfdIdentifierList=${vnfdIdentifierList} parameterFile=${parameterFile}"


   # ====== Build ===========================================================
   if [ $n -eq 0 ] ; then
      echo -e "\x1b[34m`date +%FT%H:%M:%S`: Building ...\x1b[0m"
      cmake .
      make
   fi


   # ====== Clean up ========================================================
   echo -e "\x1b[34m`date +%FT%H:%M:%S`: Deleting existing NS ${ns}, NSD ${nsdIdentifier} and VNFDs ${vnfdIdentifierList} ...\x1b[0m"

   osm ns-delete --wait ${ns} || true
   osm nsd-delete ${nsdIdentifier} || true
   for vnfdIdentifier in ${vnfdIdentifierList} ; do
      osm vnfd-delete ${vnfdIdentifier} || true
   done


   # ====== Create/Update ===================================================
   echo -e "\x1b[34m`date +%FT%H:%M:%S`: Creating VNFDs ${vnfdIdentifierList} and NSD ${nsdIdentifier} ...\x1b[0m"

   # ------ Create/Update VNFDs ---------------------------------------------
   for vnfdIdentifier in ${vnfdIdentifierList} ; do
      vnfd="${vnfdArray[${vnfdIdentifier}]}"
      if [ "${vnfd}" == "" ] ; then
         echo >&2 "ERROR: Unable to find VNFD for identifier ${vnfdIdentifier} in ( ${!vnfdArray[@]} )!"
         exit 1
      fi
      vnfdTarball="${vnfd}.tar.gz"
      if [ ! -e "${vnfdTarball}" ] ; then
         echo >&2 "ERROR: VNFD tarball ${vnfdTarball} does not exist!"
         exit 1
      fi
      echo "Creating VNFD ${vnfdIdentifier} from tarball ${vnfdTarball} ..."
      if ! osm vnfd-create ${vnfdTarball} ; then
         echo >&2 "ERROR: Creating VNFD failed!"
         exit 1
#          echo "Trying update instead ..."
#          osm vnfd-update ${vnfdIdentifier} --content ${vnfdTarball}
      fi
   done

   # ------ Create/Update NSD -----------------------------------------------
   nsdTarball="${nsd}.tar.gz"
   if [ ! -e "${nsdTarball}" ] ; then
      echo >&2 "ERROR: NSD tarball ${nsdTarball} does not exist!"
      exit 1
   fi
   echo "Creating NSD ${nsdIdentifier} from tarball ${nsdTarball} ..."
   if ! osm nsd-create ${nsdTarball} ; then
      echo >&2 "ERROR: Creating NSD failed!"
      exit 1
#       echo "Trying update instead ..."
#       osm nsd-update ${nsdTarball}
   fi


   # ====== Instantiate =====================================================
   echo -e "\x1b[34m`date +%FT%H:%M:%S`: Instantiating ${NS} ...\x1b[0m"
   if [ -e ${parameterFile} ] ; then
      config_file_option=" --config_file ${parameterFile}"
   else
      echo >&2 "WARNING: No configuration file ${parameterFile} found!"
      config_file_option=""
   fi
   osm ns-create \
      --ns_name ${ns} \
      --nsd_name ${nsdIdentifier} \
      ${config_file_option} \
      --vim_account ${VIM_ACCOUNT} \
      --ssh_keys ~/.ssh/osm-user.pub
      # --config '{vld: [ {name: mgmtnet, vim-network-name: openstack-vms} ] }'


   # ====== Done! ===========================================================
   echo -e "\x1b[34m`date +%FT%H:%M:%S`: Done!\x1b[0m"

   nsIdentifier=`osm ns-list --filter=name=${ns} | grep "| ${ns}" | awk '{ print $4 }'`
   echo "NS identifier: ${nsIdentifier}"
   echo "On the OSM Controller, use the following command to switch to the new Juju model:"
   echo "juju switch ${nsIdentifier}"

   if [ -e /snap/bin/juju ] ; then
      sleep 15
      /snap/bin/juju switch ${nsIdentifier}
   fi

   shift
   let n=$n+1
done
