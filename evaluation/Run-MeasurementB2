#!/bin/bash -e
# =====================================================================
#     #######  #####          #     #   ###   #     # #     #   ###
#     #       #     #         #     #    #    ##    # ##    #    #
#     #       #               #     #    #    # #   # # #   #    #
#      #####  #  ####  #####  #     #    #    #  #  # #  #  #    #
#           # #     #          #   #     #    #   # # #   # #    #
#     #     # #     #           # #      #    #    ## #    ##    #
#      #####   #####             #      ###   #     # #     #   ###
# =====================================================================
#
# SimulaMet OpenAirInterface Evolved Packet Core VNF and NS
# Copyright (C) 2019-2021 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no

# ===========================================================================
# Description:
# Packet loss
# - 300s no packet loss
# - 300s 10% packet loss
# - 300s no packet loss
# ===========================================================================


# NOTE:
# * Manually start NetPerfMeter on port 9000 on ${IP_SERVER}!
# * Make sure to allow password-less sudo on server and eNodeB!


DIRECTORY="MeasurementB2"
INTERFACE="any"
RUNTIME=900

IP_ENODEB="10.1.1.87"
IP_HSS="10.208.0.200"
IP_MME="10.208.0.201"
IP_SPGWC="10.208.0.202"
IP_SPGWU="10.208.0.203"
IP_FLEXRAN="10.208.0.218"
IP_SERVER="10.1.1.247"
DESTINATION="${IP_SERVER}:9000"   # NetPerfMeter destination
SSH_EPC="sudo -u dreibh sshpass -p osm4us ssh -4C -oStrictHostKeyChecking=no -J nornetpp@10.1.1.85 nornetpp@"
SSH_OTHER="sudo -u#${SUDO_UID} -g#${SUDO_GID} ssh -4C nornetpp@"

# curl 'http://localhost:9091/api/v1/query_range?query=osm_cpu_load_5min&start=2020-09-11T06:00:00.000Z&end=2020-09-11T06:00:30.000Z&step=1s'
PROMETHEUS='http://localhost:9091/api/v1/query_range'
PROMETHEUS_METRICS="osm_cpu_load_current osm_cpu_load_15min osm_cpu_load_1min osm_cpu_load_5min osm_cpu_processes osm_disk_usage osm_memory_ram_usage osm_memory_swap_usage osm_network_mgmt_bytes_in osm_network_mgmt_bytes_out osm_network_mgmt_packets_in osm_network_mgmt_packets_out osm_network_S11_bytes_in osm_network_S11_bytes_out osm_network_S11_packets_in osm_network_S11_packets_out osm_network_S1C_bytes_in osm_network_S1C_bytes_out osm_network_S1C_packets_in osm_network_S1C_packets_out osm_network_S6a_bytes_in osm_network_S6a_bytes_out osm_network_S6a_packets_in osm_network_S6a_packets_out osm_system_random osm_system_uptime osm_system_users up"

# ====== Initialise =========================================================
if [ "${SUDO_UID}:${SUDO_GID}" == ":" ] ; then
   echo >&2 "ERROR: Run this script with sudo, since it has to enable ECN and start tshark!"
   exit 1
fi

# sudo ifconfig wwan0 mtu 1440     # !!! Set MTU here!
sudo sysctl net.ipv4.tcp_ecn=1   # !!! Enable ECN here!

sudo -u#${SUDO_UID} -g#${SUDO_GID} ssh-keygen -q -R ${IP_FLEXRAN}  >/dev/null 2>&1
sudo -u#${SUDO_UID} -g#${SUDO_GID} ssh-keygen -q -R ${IP_MME}      >/dev/null 2>&1
sudo -u#${SUDO_UID} -g#${SUDO_GID} ssh-keygen -q -R ${IP_HSS}      >/dev/null 2>&1
sudo -u#${SUDO_UID} -g#${SUDO_GID} ssh-keygen -q -R ${IP_SPGWC}    >/dev/null 2>&1
sudo -u#${SUDO_UID} -g#${SUDO_GID} ssh-keygen -q -R ${IP_SPGWU}    >/dev/null 2>&1


echo "Checking QoS Setup ..."
if ! sudo -u#${SUDO_UID} -g#${SUDO_GID} ssh -p 2909 nornetpp@localhost HENCSAT-QoS-Setup change 100000 0 0.0 0.0 ; then
   echo >&2 "ERROR: Unable to configure QoS settings!"
   exit 1
fi

echo "Checking EPC connection ..."
${SSH_EPC}${IP_FLEXRAN} sudo hostname
${SSH_EPC}${IP_MME}     sudo hostname
${SSH_EPC}${IP_HSS}     sudo hostname
${SSH_EPC}${IP_SPGWC}   sudo hostname
${SSH_EPC}${IP_SPGWU}   sudo hostname


echo "Checking server connection ..."
# NOTE: Add this to /etc/sudoers on the server:
# # User rules for nornetpp
# nornetpp ALL=(ALL) NOPASSWD:ALL
${SSH_OTHER}${IP_SERVER} sudo hostname

echo "Checking eNodeB connection ..."
# NOTE: Add this to /etc/sudoers on the eNodeB
# # User rules for nornetpp
# nornetpp ALL=(ALL) NOPASSWD:ALL
${SSH_OTHER}${IP_ENODEB} sudo hostname

echo "Checking Prometheus connection ..."
if ! curl -o /dev/null "${PROMETHEUS}?query=osm_cpu_load_5min&start=2020-09-11T06:00:00.000Z&end=2020-09-11T06:00:30.000Z&step=1s" 2>/dev/null ; then
   echo >&2 "ERROR: Unable to get data from Prometheus! Check tunnel!"
   exit 1
fi


sudo -u#${SUDO_UID} -g#${SUDO_GID} mkdir -p ${DIRECTORY}

SUMMARY_OLD="${DIRECTORY}/results.summary"
SUMMARY_NEW="${DIRECTORY}/results.summary.new"
SUMMARY_UPDATED="${DIRECTORY}/results.summary.updated"
(
   echo "--varnames=\"TimeStamp Scenario Protocol Runtime FlowParameters BackgroundFlowParameters QoSBandwidth QoSDelay QoSLossRate QoSErrorRate\""
   echo "--resultsdirectory=${DIRECTORY}"
) >${SUMMARY_NEW}


# ====== Flow parameters ====================================================
saturatedFlow="const0:const1400"
streamingFlow="const60:const20000"   # 9.6 Mbit/s payload
maxMsgSize=1400                      # Max. 1440 bytes per SCTP message/UDP packet
tcpdumpSnaplens="128"   # "128 65536"
remoteSnaplen="`echo ${tcpdumpSnaplens} | xargs -n1 | head -n1`"   # Just use the first one


# ###### Start monitoring EPC component #####################################
start-monitoring ()
{
   local id="$1"
   local component="$2"
   local Component="${component^^}"
   local ip="$3"
   local sysstatParameters="$4"
   local inEPC="$5"

   local ssh="${SSH_OTHER}"
   if [ "$inEPC" == "in-epc" ] ; then
      ssh="${SSH_EPC}"
   fi

   # Copy T-Shark helper script
   cat tshark-xz | ${ssh}${ip} 'cat >~/tshark-xz && chmod +x ~/tshark-xz'

   ${ssh}${ip} /bin/bash -c "\"\\
killall -q -sKILL sar ; \\
sudo killall -q -sKILL tshark ; \\
find /tmp -maxdepth 1 -name "*.pcap*" -or -name "*.json*" -or -name "*.data" -or -name "*.out" -or -name "*.xz" | xargs sudo rm ; \\
echo \\\"${Component}: starting tshark-xz script ...\\\" ; \\
sudo apt install inotify-tools stress -y ; \\
{ nohup sudo ~/tshark-xz /tmp/${id}-${component}.pcap.xz -i any -n -s ${remoteSnaplen} '!(tcp port 22 or udp port 1194)' >/tmp/${id}-${component}-tshark.out 2>&1 & } ; \\
echo \\\"${Component}: starting sar ...\\\" ; \\
{ nohup sar -o /tmp/${id}-${component}.data ${sysstatParameters} >/tmp/${id}-${component}-sar.out 2>&1 & } ;\\
echo \\\"${Component}: monitoring ready!\\\"
\""
}

# sleep 3 ; \\
# sudo chattr +c /tmp/${id}-${component}.pcap || true ; \\


# ###### Stop monitoring EPC component ######################################
stop-monitoring ()
{
   local id="$1"
   local component="$2"
   local Component="${component^^}"
   local ip="$3"
   local inEPC="$4"

   local ssh="${SSH_OTHER}"
   if [ "$inEPC" == "in-epc" ] ; then
      ssh="${SSH_EPC}"
   fi

   ${ssh}${ip} /bin/bash -c "\"\\
killall -q -sKILL sar ; \\
{ inotifywait -q --timeout 300 --event close_write /tmp/${id}-${component}.pcap.xz & } ; \\
ps ax | grep tshark >>/tmp/q0 ; \\
sudo killall -q -sINT tshark ; \\
wait ; \\
ps ax | grep tshark >>/tmp/q1 ; \\
find /tmp -maxdepth 1 -name ${id}-${component}.pcap* | xargs -r sudo chown nornetpp:nornetpp ; \\
find /tmp -maxdepth 1 -name ${id}-${component}.out   | xargs -r xz -T0 ; \\
echo \\\"${Component}: monitoring stopped!\\\" ; \\
\""

sudo -u dreibh rsync -Pavz -e "sshpass -p osm4us ssh -4C -oStrictHostKeyChecking=no -J nornetpp@10.1.1.85" nornetpp@${ip}:/tmp/${id}-${component}* ${DIRECTORY}/
}

# find /tmp -maxdepth 1 -name ${id}-${component}.pcap  | xargs -r xz -T0 ; \\


# ###### Get Prometheus metrics #############################################
get-prometheus-metrics ()
{
   local id="$1"
   local startTime="$2"
   local endTime="$3"

   echo "${startTime}" > ${DIRECTORY}/${id}-Prometheus-StartTime.txt
   echo "${endTime}" > ${DIRECTORY}/${id}-Prometheus-EndTime.txt

   # TEST: Start to query from 5 min earlier!
   # let startTime=${startTime}-300

   for metric in ${PROMETHEUS_METRICS} ; do
      query="${PROMETHEUS}?query=${metric}&start=${startTime}&end=${endTime}&step=1s"
      echo "Prometheus Query: ${query}"
      curl -o ${DIRECTORY}/${id}-Prometheus-${metric}.json "${query}" || true
   done
}


# ====== Run measurements ===================================================
for qosBandwidth in 100000 ; do   # 100000
   qosDelay=0
   qosLossRate=0.0
   qosErrorRate=0.0
   backgroundFlowParameters="-udp const50:exp2500:const50:exp2500"   # 1 Mbit/s!
   for scenario in Download ; do   #  Download Upload Bidirectional
      for protocol in tcp ; do   # udp tcp sctp
         flowParameters="INVALID!"
         if [ "${protocol}" == "udp" ] ; then
            flowParameters="${streamingFlow}"
         else
            flowParameters="${saturatedFlow}"
         fi
         if [ "${scenario}" == "Bidirectional" ] ; then
             flowParameters="${flowParameters}:${flowParameters}:maxmsgsize=${maxMsgSize},sndbuf=0,rcvbuf=0"
          elif [ "${scenario}" == "Upload" ] ; then
             flowParameters="${flowParameters}:const0:const0:maxmsgsize=${maxMsgSize},sndbuf=0,rcvbuf=0"
          elif [ "${scenario}" == "Download" ] ; then
             flowParameters="const0:const0:${flowParameters}:maxmsgsize=${maxMsgSize},sndbuf=0,rcvbuf=0"
          else
             echo >&2 "ERROR: Bad scenario ${scenario}!"
             exit 1
          fi

         now=`date +%FT%H:%M:%S.%N`
         echo ""
         echo "====== ${now}: ${protocol^^}, ${flowParameters} ======"

         values="${now} ${scenario} ${protocol^^} ${RUNTIME} \"${flowParameters}\" \"${backgroundFlowParameters}\" ${qosBandwidth} ${qosDelay} ${qosLossRate} ${qosErrorRate}"
         id=`echo "${now}: ${values}" | sha256 -x`
         prefix="${DIRECTORY}/${id}"
         scalarFile="${prefix}.sca"
         scalarFileA="${prefix}-active.sca"
         scalarFileP="${prefix}-passive.sca"
         vectorFile="${prefix}.vec"
         mmeStatsFile="${prefix}-mme.data"

         (
            echo "--values=${values}"
            echo "--input=${scalarFileA}"
            echo "--values=${values}"
            echo "--input=${scalarFileP}"
         ) >>${SUMMARY_NEW}


         # ====== Start RAN information collection on FlexRAN Controller ====
         echo "Starting FlexRAN Controller statistics collection ..."
         cat get-flexran-info | ${SSH_EPC}${IP_FLEXRAN} 'cat >~/get-flexran-info && chmod +x ~/get-flexran-info'
         ${SSH_EPC}${IP_FLEXRAN} /bin/bash -c "\"\\
killall -q get-flexran-info ; \\
{ nohup ./get-flexran-info /tmp/${id}-flexran >${id}-flexran-get-flexran-info.log 2>&1 & } ; \\
echo \\\"flexran: FlexRAN statistics collection running!\\\"
\""
echo "OK!"

         # ====== Start sysstat in EPC ======================================
         sysstatParameters="-bqr -n DEV,EDEV,IP,EIP,ICMP,EICMP,IP6,EIP6,ICMP6,EICMP6,TCP,ETCP,UDP,UDP6 1 600"
         start-monitoring ${id} flexran ${IP_FLEXRAN} "${sysstatParameters}" in-epc &
         start-monitoring ${id} hss     ${IP_HSS}     "${sysstatParameters}" in-epc &
         start-monitoring ${id} mme     ${IP_MME}     "${sysstatParameters}" in-epc &
         start-monitoring ${id} spgwc   ${IP_SPGWC}   "${sysstatParameters}" in-epc &
         start-monitoring ${id} spgwu   ${IP_SPGWU}   "${sysstatParameters}" in-epc &
         start-monitoring ${id} server  ${IP_SERVER}  "${sysstatParameters}" &
         start-monitoring ${id} eNodeB  ${IP_ENODEB}  "${sysstatParameters}" &
         wait


         # ====== Start HiPerConTracer ======================================
         echo "Starting HiPerConTracer ..."
         sudo killall hipercontracer 2>/dev/null || true
         sudo hipercontracer -source=0.0.0.0 -destination=${IP_SERVER} \
            --ping --pinginterval=250 \
            --resultstransactionlength=86400 \
            --resultsdirectory=${prefix}-ping &
         hiPerConTracerPID=$!


         # ====== Start tshark =============================================
         echo "Starting TShark ..."
         sudo killall tshark 2>/dev/null || true
         for tcpdumpSnaplen in ${tcpdumpSnaplens} ; do
            ./tshark-xz "${prefix}-${tcpdumpSnaplen}.pcap.xz" -i ${INTERFACE} -s ${tcpdumpSnaplen} -n '!(tcp port 22 or udp port 1194)' &
         done
         #sleep 3
         #for tcpdumpSnaplen in ${tcpdumpSnaplens} ; do
         #   chattr +c "${prefix}-${tcpdumpSnaplen}.pcap" || true
         #done


         # ====== Apply QoS Settings ========================================
         sudo -u#${SUDO_UID} -g#${SUDO_GID} ssh -p 2909 nornetpp@localhost HENCSAT-QoS-Setup change \
            ${qosBandwidth} ${qosDelay} ${qosLossRate} ${qosErrorRate}


         # ====== Run NetPerfMeter ==========================================
         echo "Running NetPerfMeter ..."
         startTime=`date +"%s"`
         sudo -u#${SUDO_UID} -g#${SUDO_GID} netperfmeter ${DESTINATION} \
            -quiet -runtime=${RUNTIME} \
            -scalar="${scalarFile}" \
            -${protocol} ${flowParameters} \
            ${backgroundFlowParameters} &
         netPerfMeterPID=$!
         echo "PID=${netPerfMeterPID}"
# -vector="${vectorFile}" !!!

         # §§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§

         # ====== QoS changes ===============================================

         sleep 300
         # 10% Packet Loss
         sudo -u#${SUDO_UID} -g#${SUDO_GID} ssh -p 2909 nornetpp@localhost HENCSAT-QoS-Setup change \
            ${qosBandwidth} ${qosDelay} 0.10 ${qosErrorRate}
         sleep 300
         sudo -u#${SUDO_UID} -g#${SUDO_GID} ssh -p 2909 nornetpp@localhost HENCSAT-QoS-Setup change \
            ${qosBandwidth} ${qosDelay} ${qosLossRate} ${qosErrorRate}


         # §§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§


         # ====== End of measurement ========================================
         echo "Waiting for ${netPerfMeterPID} to finish ..."
         wait ${netPerfMeterPID}
         echo "OK!"
         endTime=`date +"%s"`
         echo "Stopping TShark ..."
         sudo killall tshark || true
         echo "Stopping HiPerConTracer ..."
         sudo killall hipercontracer || true
         wait


         # ====== Unset QoS Settings ========================================
         sudo -u#${SUDO_UID} -g#${SUDO_GID} ssh -p 2909 nornetpp@localhost HENCSAT-QoS-Setup change \
            100000 0 0.0 0.0

         # ====== Stop RAN information collection on FlexRAN Controller =====
         echo "Stopping FlexRAN Controller statistics collection ..."
         ${SSH_EPC}${IP_FLEXRAN} /bin/bash -c "\"\\
killall -q get-flexran-info
\""

         # ====== Stop sysstat in EPC and collect statistics ================
         echo "Stopping sar and and collecting statistics ..."
         stop-monitoring ${id} eNodeB  ${IP_ENODEB} &
         stop-monitoring ${id} server  ${IP_SERVER} &
         stop-monitoring ${id} hss     ${IP_HSS}     in-epc &
         stop-monitoring ${id} mme     ${IP_MME}     in-epc &
         stop-monitoring ${id} spgwc   ${IP_SPGWC}   in-epc &
         stop-monitoring ${id} spgwu   ${IP_SPGWU}   in-epc &
         stop-monitoring ${id} flexran ${IP_FLEXRAN} in-epc &
         wait

         # ====== Get metrics from Prometheus ===============================
         get-prometheus-metrics "${id}" "${startTime}" "${endTime}"

         # ====== Set ownership and compress pcap files =====================
         find ${DIRECTORY} -name "${id}-flexran-*.json.xz" | xargs -r xzcat | jq -s 'sort_by(.date_time)' | xz -T0 -c >${DIRECTORY}/${id}-flexran.json.xz && find ${DIRECTORY} -name "${id}-flexran-*.json.xz" | xargs -r rm  || true
         chown ${SUDO_UID}:${SUDO_GID} ${prefix}*
         mv ${prefix}-ping/*.bz2 ${prefix}-ping.bz2  || true
         rmdir ${prefix}-ping/tmp  || true
         rmdir ${prefix}-ping  || true
      done
   done
done


# ====== Prepare results ====================================================
cat ${SUMMARY_NEW} >${SUMMARY_UPDATED}
if [ -e "${SUMMARY_OLD}" ] ; then
   grep -v ^--varnames= ${SUMMARY_OLD} | grep -v ^--resultsdirectory= >>${SUMMARY_UPDATED}
fi
mv ${SUMMARY_UPDATED} ${SUMMARY_OLD}
chown ${SUDO_UID}:${SUDO_GID} ${SUMMARY_OLD} ${SUMMARY_NEW}

sudo -u#${SUDO_UID} -g#${SUDO_GID} createsummary xy -ignore-scalar-file-errors <${SUMMARY_OLD}
