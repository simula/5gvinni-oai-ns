#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import functools
import os
import re
import subprocess
import sys
import traceback
from ipaddress import IPv4Address, IPv4Interface, IPv6Address, IPv6Interface

# ------ VDUHelper ----------------------------------------------------------
sys.path.append('../vduhelper')
import VDUHelper

vduHelper = VDUHelper.VDUHelper(True)   # Test Mode!!!


# ###### Dummy function #####################################################
def clear_flag(flag):
   # Nothing to do!
   pass


# ###### Dummy function #####################################################
def set_flag(flag):
   # Nothing to do!
   pass


# ###### Dummy function #####################################################
def status_set(tag, value):
   # Nothing to do!
   pass


# ###### Dummy function #####################################################
MyParameters = {
   # ====== Git =============================================================
   'git-name': 'Thomas Dreibholz',
   'git-email': 'dreibh@simula.no',

   # ====== HSS =============================================================
   'hss-git-repository': 'https://github.com/simula/openairinterface-openair-hss.git',
   'hss-git-commit': 'dreibh/cassandra-build-fix-22oct2020',
   'hss-S6a-address': '172.16.6.129',
   'network-realm': 'simula.nornet',
   'network-k': '449C4B91AEACD0ACE182CF3A5A72BFA1',
   'network-op': '1006020F0A478BF6B699F15C062E42B3',
   'network-imsi-first': '242881234500000',
   'network-msisdn-first': '24288880000000',
   'network-users': '1024',
   'cassandra-server-ip': '172.16.6.129',

   # ====== MME =============================================================
   'mme-git-repository': 'https://github.com/simula/openairinterface-openair-mme.git',
   'mme-git-commit': 'dreibh/asn1c-url-fix-14Oct2020',
   'mme-S1C-ipv4-interface': '192.168.247.102/24',
   'mme-S1C-ipv4-gateway': '0.0.0.0',
   'mme-S11-ipv4-interface': '172.16.1.102/24',
   'mme-S1C-ipv6-interface': '',
   'mme-S1C-ipv6-gateway': '',
   'mme-S6a-address': '172.16.6.2',
   'spgwc-S11-ipv4-interface': '172.16.1.104/24',
   'network-mcc': '242',
   'network-mnc': '88',

   # ====== SPGW-C ==========================================================
   'spgwc-git-repository': 'https://github.com/simula/openairinterface-openair-spgwc.git',
   'spgwc-git-commit': '2020.w36',
   'network-ipv4-dns1': '10.1.1.1',
   'network-ipv4-dns2': '10.1.2.1',

   # ====== SPGW-U ==========================================================
   'spgwu-git-repository': 'https://github.com/simula/openairinterface-openair-spgwu-tiny.git',
   'spgwu-git-commit': 'dreibh/tx-checksum-ip-generic-off',
   'spgwu-S1U-ipv4-interface': '192.168.248.159/24',
   'spgwu-S1U-ipv4-gateway': '0.0.0.0',
   'spgwu-SGi-ipv4-interface': '10.254.1.203/24',
   'spgwu-SGi-ipv4-gateway': '10.254.1.1',
   'spgwu-SGi-ipv6-interface': '',
   'spgwu-SGi-ipv6-gateway': '',
   'spgwu-spgwc-list': '172.55.55.101',

   # ====== FlexRAN =========================================================
   'flexran-git-repository': 'https://github.com/simula/mosaic5g-mosaic5g.git',
   'flexran-git-commit': 'master',
   'flexran-service-ipv4-interface': '192.168.246.100/24',
   'flexran-service-ipv4-gateway': '0.0.0.0',
   'flexran-service-ipv6-interface': '',
   'flexran-service-ipv6-gateway': ''
}

def function_get(flag):
   return MyParameters[flag]


# ###### Dummy function #####################################################
def function_set(values):
   # Nothing to do!
   pass


# ###### Dummy function #####################################################
def function_fail(message):
   # Nothing to do!
   pass


# ###### Dummy decorator ####################################################
def when(*flags):
    def decorator_when(func):
        @functools.wraps(func)
        def wrapper_when(*args, **kwargs):
            return func(*args, **kwargs)
        return wrapper_when
    return decorator_when


# ###### Dummy decorator ####################################################
def when_not(*flags):
    def decorator_when(func):
        @functools.wraps(func)
        def wrapper_when(*args, **kwargs):
            return func(*args, **kwargs)
        return wrapper_when
    return decorator_when



# ###########################################################################
# #### HSS Charm functions                                               ####
# ###########################################################################

# ###### Installation #######################################################
@when('sshproxy.configured')
@when_not('hsscharm.installed')
def install_hsscharm_proxy_charm():
   set_flag('hsscharm.installed')
   vduHelper.setStatus('install_hsscharm_proxy_charm: SSH proxy charm is READY')


# ###### prepare-cassandra-hss-build function ###############################
@when('actions.prepare-cassandra-hss-build')
@when('hsscharm.installed')
@when_not('hsscharm.prepared-cassandra-hss-build')
def prepare_cassandra_hss_build():
   vduHelper.beginBlock('prepare_cassandra_hss_build')
   try:

      # ====== Get HSS parameters ===========================================
      # For a documentation of the installation procedure, see:
      # https://github.com/simula/openairinterface-openair-cn/wiki/OpenAirSoftwareSupport#install-hss

      gitRepository = function_get('hss-git-repository')
      gitCommit     = function_get('hss-git-commit')
      gitDirectory  = 'openair-hss'

      # Prepare network configuration:
      hssS6a_IfName    = 'ens4'
      configurationS6a = vduHelper.makeInterfaceConfiguration(hssS6a_IfName, IPv4Interface('0.0.0.0/0'))

      # ====== Prepare system ===============================================
      vduHelper.beginBlock('Preparing system')
      vduHelper.configureInterface(hssS6a_IfName, configurationS6a, 61)
      vduHelper.testNetworking()
      vduHelper.waitForPackageUpdatesToComplete()
      vduHelper.executeFromString("""if [ "`find /etc/apt/sources.list.d -name 'rmescandon-ubuntu-yq-*.list'`" == "" ] ; then sudo add-apt-repository -y ppa:rmescandon/yq ; fi""")
      vduHelper.aptInstallPackages([ 'yq' ])
      vduHelper.endBlock()

      # ====== Prepare sources ==============================================
      vduHelper.beginBlock('Preparing sources')
      vduHelper.fetchGitRepository(gitDirectory, gitRepository, gitCommit)
      vduHelper.endBlock()


      message = vduHelper.endBlock()
      function_set( { 'outout': message } )
      set_flag('hsscharm.prepared-cassandra-hss-build')
   except:
      message = vduHelper.endBlockInException()
      function_fail(message)
   finally:
      clear_flag('actions.prepare-cassandra-hss-build')


# ###### configure-cassandra function #######################################
@when('actions.configure-cassandra')
@when('hsscharm.prepared-cassandra-hss-build')
def configure_cassandra():
   vduHelper.beginBlock('configure_cassandra')
   try:

      # ====== Get HSS parameters ===========================================
      # For a documentation of the installation procedure, see:
      # https://github.com/simula/openairinterface-openair-cn/wiki/OpenAirSoftwareSupport#install-hss

      gitDirectory      = 'openair-hss'
      cassandraServerIP = function_get('cassandra-server-ip')

      # ====== Build Cassandra ==============================================
      vduHelper.beginBlock('Building Cassandra')
      vduHelper.executeFromString("""\
export MAKEFLAGS="-j`nproc`" && \\
cd /home/nornetpp/src/{gitDirectory}/scripts && \\
mkdir -p logs && \\
sudo rm -f /etc/apt/sources.list.d/cassandra.sources.list && \\
./build_cassandra --check-installed-software --force >logs/build_cassandra.log 2>&1
""".format(
         gitDirectory      = gitDirectory,
         cassandraServerIP = cassandraServerIP
      ))
      vduHelper.endBlock()

      # ====== Configure Cassandra ==========================================
      vduHelper.beginBlock('Configuring Cassandra')
      vduHelper.executeFromString("""\
cd /home/nornetpp/src/{gitDirectory}/scripts && \\
sudo update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java && \\
sudo service cassandra stop && \\
sudo rm -rf /var/lib/cassandra/data/system/* && \\
sudo rm -rf /var/lib/cassandra/commitlog/* && \\
sudo rm -rf /var/lib/cassandra/data/system_traces/* && \\
sudo rm -rf /var/lib/cassandra/saved_caches/* && \\
sudo yq w -i /etc/cassandra/cassandra.yaml "cluster_name" "HSS Cluster" && \\
sudo yq w -i /etc/cassandra/cassandra.yaml "seed_provider[0].class_name" "org.apache.cassandra.locator.SimpleSeedProvider" && \\
sudo yq w -i /etc/cassandra/cassandra.yaml "seed_provider[0].parameters[0].seeds" "{cassandraServerIP}" && \\
sudo yq w -i /etc/cassandra/cassandra.yaml "listen_address" "{cassandraServerIP}" && \\
sudo yq w -i /etc/cassandra/cassandra.yaml "rpc_address" "{cassandraServerIP}" && \\
sudo yq w -i /etc/cassandra/cassandra.yaml "endpoint_snitch" "GossipingPropertyFileSnitch" && \\
sudo service cassandra start && \\
sleep 10 && \\
sudo service cassandra status | cat
""".format(
         gitDirectory      = gitDirectory,
         cassandraServerIP = cassandraServerIP
      ))
      vduHelper.endBlock()


      message = vduHelper.endBlock()
      function_set( { 'outout': message } )
      set_flag('hsscharm.configured-cassandra')
   except:
      message = vduHelper.endBlockInException()
      function_fail(message)
   finally:
      clear_flag('actions.configure-cassandra')


# ###### configure-hss function #############################################
@when('actions.configure-hss')
@when('hsscharm.configured-cassandra')
def configure_hss():
   vduHelper.beginBlock('configure_hss')
   try:

      # ====== Get HSS parameters ===========================================
      # For a documentation of the installation procedure, see:
      # https://github.com/simula/openairinterface-openair-cn/wiki/OpenAirSoftwareSupport#install-hss

      gitDirectory       = 'openair-hss'
      cassandraServerIP  = function_get('cassandra-server-ip')
      networkRealm       = function_get('network-realm')
      networkOP          = function_get('network-op')
      networkK           = function_get('network-k')
      networkIMSIFirst   = function_get('network-imsi-first')
      networkMSISDNFirst = function_get('network-msisdn-first')
      networkUsers       = int(function_get('network-users'))

      hssS6a_IPv4Address = IPv4Address(function_get('hss-S6a-address'))
      mmeS6a_IPv4Address = IPv4Address(function_get('mme-S6a-address'))

      # ====== Build HSS dependencies =======================================
      vduHelper.beginBlock('Building HSS dependencies')
      vduHelper.executeFromString("""\
export MAKEFLAGS="-j`nproc`" && \\
cd /home/nornetpp/src/{gitDirectory}/scripts && \\
mkdir -p logs && \\
./build_hss_rel14 --check-installed-software --force >logs/build_hss_rel14-1.log 2>&1
""".format(gitDirectory = gitDirectory))
      vduHelper.endBlock()

      # ====== Build HSS itself =============================================
      vduHelper.beginBlock('Building HSS itself')
      vduHelper.executeFromString("""\
export MAKEFLAGS="-j`nproc`" && \\
cd /home/nornetpp/src/{gitDirectory}/scripts && \\
./build_hss_rel14 --clean >logs/build_hss_rel14-2.log 2>&1 && \\
cqlsh --file ../src/hss_rel14/db/oai_db.cql {cassandraServerIP} >logs/oai_db.log 2>&1
""".format(
         gitDirectory       = gitDirectory,
         cassandraServerIP  = cassandraServerIP
      ))
      vduHelper.endBlock()


      # ====== Provision users and MME ======================================
      vduHelper.beginBlock('Provisioning users and MME')
      vduHelper.executeFromString("""\
cd /home/nornetpp/src/{gitDirectory}/scripts && \\
./data_provisioning_users --apn default.{networkRealm} --apn2 internet.{networkRealm} --key {networkK} --imsi-first {networkIMSIFirst} --msisdn-first {networkMSISDNFirst} --mme-identity mme.{networkRealm} --no-of-users {networkUsers} --realm {networkRealm} --truncate True  --verbose True --cassandra-cluster {cassandraServerIP} >logs/data_provisioning_users.log 2>&1 && \\
./data_provisioning_mme --id 3 --mme-identity mme.{networkRealm} --realm {networkRealm} --ue-reachability 1 --truncate True  --verbose True -C {cassandraServerIP} >logs/data_provisioning_mme.log 2>&1
""".format(
         gitDirectory       = gitDirectory,
         cassandraServerIP  = cassandraServerIP,
         networkRealm       = networkRealm,
         networkOP          = networkOP,
         networkK           = networkK,
         networkIMSIFirst   = networkIMSIFirst,
         networkMSISDNFirst = networkMSISDNFirst,
         networkUsers       = networkUsers
      ))
      vduHelper.endBlock()

      # ====== Configure HSS ================================================
      vduHelper.beginBlock('Configuring HSS')
      vduHelper.executeFromString("""\
cd /home/nornetpp/src/{gitDirectory}/scripts && \\
echo "{hssS6a_IPv4Address}   hss.{networkRealm} hss" | sudo tee -a /etc/hosts && \\
echo "{mmeS6a_IPv4Address}   mme.{networkRealm} mme" | sudo tee -a /etc/hosts && \\
openssl rand -out $HOME/.rnd 128 && \\
echo "====== Configuring Diameter ... ======" && \\
PREFIX='/usr/local/etc/oai' && \\
sudo mkdir -m 0777 -p $PREFIX && \\
sudo mkdir -m 0777 -p $PREFIX/freeDiameter && \\
sudo cp ../etc/acl.conf ../etc/hss_rel14_fd.conf $PREFIX/freeDiameter && \\
sudo cp ../etc/hss_rel14.conf ../etc/hss_rel14.json $PREFIX && \\
sudo sed -i -e 's/#ListenOn/ListenOn/g' $PREFIX/freeDiameter/hss_rel14_fd.conf && \\
echo "====== Updating configuration files ... ======" && \\
declare -A HSS_CONF && \\
HSS_CONF[@PREFIX@]=$PREFIX && \\
HSS_CONF[@REALM@]='{networkRealm}' && \\
HSS_CONF[@HSS_FQDN@]='hss.{networkRealm}' && \\
HSS_CONF[@cassandra_Server_IP@]='{cassandraServerIP}' && \\
HSS_CONF[@cassandra_IP@]='{cassandraServerIP}' && \\
HSS_CONF[@OP_KEY@]='{networkOP}' && \\
HSS_CONF[@ROAMING_ALLOWED@]='true' && \\
for K in "${{!HSS_CONF[@]}}"; do echo "K=$K ..." && sudo egrep -lRZ "$K" $PREFIX | xargs -0 -l sudo sed -i -e "s|$K|${{HSS_CONF[$K]}}|g" ; done && \\
../src/hss_rel14/bin/make_certs.sh hss {networkRealm} $PREFIX && \\
echo "====== Updating key ... ======" && \\
oai_hss -j $PREFIX/hss_rel14.json --onlyloadkey >logs/onlyloadkey.log 2>&1
""".format(
         gitDirectory       = gitDirectory,
         cassandraServerIP  = cassandraServerIP,
         hssS6a_IPv4Address = hssS6a_IPv4Address,
         mmeS6a_IPv4Address = mmeS6a_IPv4Address,
         networkRealm       = networkRealm,
         networkOP          = networkOP,
         networkK           = networkK,
         networkIMSIFirst   = networkIMSIFirst,
         networkMSISDNFirst = networkMSISDNFirst,
         networkUsers       = networkUsers
      ))
      vduHelper.endBlock()

      # ====== Set up HSS service ===========================================
      vduHelper.beginBlock('Setting up HSS service')
      vduHelper.configureSystemInfo('HSS', 'This is the HSS of the SimulaMet OAI VNF!')
      vduHelper.createFileFromString('/lib/systemd/system/hss.service', """\
[Unit]
Description=Home Subscriber Server (HSS)
After=ssh.target

[Service]
ExecStart=/bin/sh -c 'exec /usr/local/bin/oai_hss -j /usr/local/etc/oai/hss_rel14.json >>/var/log/hss.log 2>&1'
KillMode=process
Restart=on-failure
RestartPreventExitStatus=255
WorkingDirectory=/home/nornetpp/src/{gitDirectory}/scripts

[Install]
WantedBy=multi-user.target
""".format(gitDirectory = gitDirectory))

      vduHelper.createFileFromString('/home/nornetpp/log',
"""\
#!/bin/sh
tail -f /var/log/hss.log
""", True)

      vduHelper.createFileFromString('/home/nornetpp/restart',
"""\
#!/bin/sh
DIRECTORY=`dirname $0`
sudo service hss restart && $DIRECTORY/log
""", True)
      vduHelper.runInShell('sudo chown nornetpp:nornetpp /home/nornetpp/log /home/nornetpp/restart')
      vduHelper.endBlock()

      # ====== Set up sysstat service =======================================
      vduHelper.installSysStat()

      # ====== Clean up =====================================================
      vduHelper.cleanUp()

      message = vduHelper.endBlock()
      function_set( { 'outout': message } )
      set_flag('hsscharm.configured-hss')
   except:
      message = vduHelper.endBlockInException()
      function_fail(message)
   finally:
      clear_flag('actions.configure-hss')


# ###### restart-hss function ###############################################
@when('actions.restart-hss')
@when('hsscharm.configured-hss')
def restart_hss():
   vduHelper.beginBlock('restart_hss')
   try:

      vduHelper.runInShell('sudo service hss restart')

      message = vduHelper.endBlock()
      function_set( { 'outout': message } )
   except:
      message = vduHelper.endBlockInException()
      function_fail(message)
   finally:
      clear_flag('actions.restart-hss')



# ###########################################################################
# #### MME Charm functions                                               ####
# ###########################################################################

# ###### Installation #######################################################
@when('sshproxy.configured')
@when_not('mmecharm.installed')
def install_mmecharm_proxy_charm():
   set_flag('mmecharm.installed')
   vduHelper.setStatus('install_mmecharm_proxy_charm: SSH proxy charm is READY')


# ###### prepare-mme-build function #########################################
@when('actions.prepare-mme-build')
@when('mmecharm.installed')
@when_not('mmecharm.prepared-mme-build')
def prepare_mme_build():
   vduHelper.beginBlock('prepare_mme_build')
   try:

      # ====== Get MME parameters ===========================================
      # For a documentation of the installation procedure, see:
      # https://github.com/simula/openairinterface-openair-cn/wiki/OpenAirSoftwareSupport#install-mme

      gitRepository        = function_get('mme-git-repository')
      gitCommit            = function_get('mme-git-commit')
      gitDirectory         = 'openair-mme'

      mmeS1C_IPv4Interface = IPv4Interface(function_get('mme-S1C-ipv4-interface'))
      mmeS1C_IPv4Gateway   = IPv4Address(function_get('mme-S1C-ipv4-gateway'))
      if function_get('mme-S1C-ipv6-interface') != '':
         mmeS1C_IPv6Interface = IPv6Interface(function_get('mme-S1C-ipv6-interface'))
      else:
         mmeS1C_IPv6Interface = None
      if function_get('mme-S1C-ipv6-gateway') != '':
         mmeS1C_IPv6Gateway   = IPv6Address(function_get('mme-S1C-ipv6-gateway'))
      else:
         mmeS1C_IPv6Gateway = None

      # Prepare network configurations:
      mmeS6a_IfName = 'ens4'
      mmeS11_IfName = 'ens5'
      mmeS1C_IfName = 'ens6'

      configurationS6a = vduHelper.makeInterfaceConfiguration(mmeS6a_IfName, IPv4Interface('0.0.0.0/0'))
      configurationS11 = vduHelper.makeInterfaceConfiguration(mmeS11_IfName, IPv4Interface('0.0.0.0/0'))
      configurationS1C = vduHelper.makeInterfaceConfiguration(mmeS1C_IfName, mmeS1C_IPv4Interface, mmeS1C_IPv4Gateway,
                                                              mmeS1C_IPv6Interface, mmeS1C_IPv6Gateway)

      # S10 dummy interface:
      mmeS10_IfName    = 'dummy0'
      configurationS10 = vduHelper.makeInterfaceConfiguration(mmeS10_IfName, IPv4Interface('192.168.10.110/24'), createDummy = True)

      # ====== Prepare system ===============================================
      vduHelper.beginBlock('Preparing system')
      vduHelper.configureInterface(mmeS6a_IfName, configurationS6a, 61)
      vduHelper.configureInterface(mmeS11_IfName, configurationS11, 62)
      vduHelper.configureInterface(mmeS1C_IfName, configurationS1C, 63)
      vduHelper.configureInterface(mmeS10_IfName, configurationS10, 64)
      vduHelper.testNetworking()
      vduHelper.waitForPackageUpdatesToComplete()
      vduHelper.endBlock()

      # ====== Prepare sources ==============================================
      vduHelper.beginBlock('Preparing sources')
      vduHelper.fetchGitRepository(gitDirectory, gitRepository, gitCommit)
      vduHelper.endBlock()


      message = vduHelper.endBlock()
      function_set( { 'outout': message } )
      set_flag('mmecharm.prepared-mme-build')
   except:
      message = vduHelper.endBlockInException()
      function_fail(message)
   finally:
      clear_flag('actions.prepare-mme-build')


# ###### configure-mme function #############################################
@when('actions.configure-mme')
@when('mmecharm.prepared-mme-build')
def configure_mme():
   vduHelper.beginBlock('configure-mme')
   try:

      # ====== Get MME parameters ===========================================
      # For a documentation of the installation procedure, see:
      # https://github.com/simula/openairinterface-openair-cn/wiki/OpenAirSoftwareSupport#install-mme

      gitDirectory           = 'openair-mme'

      hssS6a_IPv4Address     = IPv4Address(function_get('hss-S6a-address'))
      mmeS1C_IPv4Interface   = IPv4Interface(function_get('mme-S1C-ipv4-interface'))
      mmeS11_IPv4Interface   = IPv4Interface(function_get('mme-S11-ipv4-interface'))
      mmeS10_IPv4Interface   = IPv4Interface('192.168.10.110/24')
      spwgcS11_IPv4Interface = IPv4Interface(function_get('spgwc-S11-ipv4-interface'))
      networkRealm           = function_get('network-realm')
      networkMCC             = int(function_get('network-mcc'))
      networkMNC             = int(function_get('network-mnc'))
      networkOP              = function_get('network-op')
      networkK               = function_get('network-k')
      networkIMSIFirst       = function_get('network-imsi-first')
      networkMSISDNFirst     = function_get('network-msisdn-first')
      networkUsers           = int(function_get('network-users'))

      TAC_SGW_TEST = 7
      TAC_SGW_0    = 600
      TAC_MME_0    = 601
      TAC_MME_1    = 602

      tac_sgw_test = '{:04x}'.format(TAC_SGW_TEST)
      tac_sgw_0    = '{:04x}'.format(TAC_SGW_0)
      tac_mme_0    = '{:04x}'.format(TAC_MME_0)
      tac_mme_1    = '{:04x}'.format(TAC_MME_1)

      # Prepare network configurations:
      mmeS6a_IfName = 'ens4'
      mmeS11_IfName = 'ens5'
      mmeS1C_IfName = 'ens6'
      mmeS10_IfName = 'dummy0'

      # ====== Build MME dependencies =======================================
      vduHelper.beginBlock('Building MME dependencies')
      vduHelper.executeFromString("""\
export MAKEFLAGS="-j`nproc`" && \\
cd /home/nornetpp/src/{gitDirectory}/scripts && \\
mkdir -p logs && \\
./build_mme --check-installed-software --force >logs/build_mme-1.log 2>&1
""".format(gitDirectory = gitDirectory))
      vduHelper.endBlock()

      # ====== Build MME itself =============================================
      vduHelper.beginBlock('Building MME itself')
      vduHelper.executeFromString("""\
export MAKEFLAGS="-j`nproc`" && \\
cd /home/nornetpp/src/{gitDirectory}/scripts && \\
./build_mme --clean >logs/build_mme-2.log 2>&1
""".format(gitDirectory = gitDirectory))
      vduHelper.endBlock()

      # ====== Configure MME ================================================
      vduHelper.beginBlock('Configuring MME')
      vduHelper.executeFromString("""\
export MAKEFLAGS="-j`nproc`" && \\
cd /home/nornetpp/src/{gitDirectory}/scripts && \\
echo "127.0.1.1        mme.{networkRealm} mme" | sudo tee -a /etc/hosts && \\
echo "{hssS6a_IPv4Address}     hss.{networkRealm} hss" | sudo tee -a /etc/hosts && \\
openssl rand -out $HOME/.rnd 128 && \\
INSTANCE=1 && \\
PREFIX='/usr/local/etc/oai' && \\
sudo mkdir -m 0777 -p $PREFIX && \\
sudo mkdir -m 0777 -p $PREFIX/freeDiameter && \\
sudo cp ../etc/mme_fd.sprint.conf  $PREFIX/freeDiameter/mme_fd.conf && \\
sudo cp ../etc/mme.conf  $PREFIX && \\
declare -A MME_CONF && \\
MME_CONF[@MME_S6A_IP_ADDR@]="127.0.0.11" && \\
MME_CONF[@INSTANCE@]=$INSTANCE && \\
MME_CONF[@PREFIX@]=$PREFIX && \\
MME_CONF[@REALM@]='{networkRealm}' && \\
MME_CONF[@PID_DIRECTORY@]='/var/run' && \\
MME_CONF[@MME_FQDN@]="mme.{networkRealm}" && \\
MME_CONF[@HSS_HOSTNAME@]='hss' && \\
MME_CONF[@HSS_FQDN@]="hss.{networkRealm}" && \\
MME_CONF[@HSS_IP_ADDR@]='{hssS6a_IPv4Address}' && \\
MME_CONF[@MCC@]='{networkMCC}' && \\
MME_CONF[@MNC@]='{networkMNC}' && \\
MME_CONF[@MME_GID@]='32768' && \\
MME_CONF[@MME_CODE@]='3' && \\
MME_CONF[@TAC_0@]='600' && \\
MME_CONF[@TAC_1@]='601' && \\
MME_CONF[@TAC_2@]='602' && \\
MME_CONF[@MME_INTERFACE_NAME_FOR_S1_MME@]='{mmeS1C_IfName}' && \\
MME_CONF[@MME_IPV4_ADDRESS_FOR_S1_MME@]='{mmeS1C_IPv4Interface}' && \\
MME_CONF[@MME_INTERFACE_NAME_FOR_S11@]='{mmeS11_IfName}' && \\
MME_CONF[@MME_IPV4_ADDRESS_FOR_S11@]='{mmeS11_IPv4Interface}' && \\
MME_CONF[@MME_INTERFACE_NAME_FOR_S10@]='{mmeS10_IfName}' && \\
MME_CONF[@MME_IPV4_ADDRESS_FOR_S10@]='{mmeS10_IPv4Interface}' && \\
MME_CONF[@OUTPUT@]='CONSOLE' && \\
MME_CONF[@SGW_IPV4_ADDRESS_FOR_S11_TEST_0@]='{spwgcS11_IPv4Address}' && \\
MME_CONF[@SGW_IPV4_ADDRESS_FOR_S11_0@]='{spwgcS11_IPv4Address}' && \\
MME_CONF[@PEER_MME_IPV4_ADDRESS_FOR_S10_0@]='0.0.0.0/24' && \\
MME_CONF[@PEER_MME_IPV4_ADDRESS_FOR_S10_1@]='0.0.0.0/24' && \\
MME_CONF[@TAC-LB_SGW_TEST_0@]={tac_sgw_test_lo} && \\
MME_CONF[@TAC-HB_SGW_TEST_0@]={tac_sgw_test_hi} && \\
MME_CONF[@MCC_SGW_0@]={networkMCC} && \\
MME_CONF[@MNC3_SGW_0@]={networkMNC:03d} && \\
MME_CONF[@TAC-LB_SGW_0@]={tac_sgw_0_lo} && \\
MME_CONF[@TAC-HB_SGW_0@]={tac_sgw_0_hi} && \\
MME_CONF[@MCC_MME_0@]={networkMCC} && \\
MME_CONF[@MNC3_MME_0@]={networkMNC:03d} && \\
MME_CONF[@TAC-LB_MME_0@]={tac_mme_0_lo} && \\
MME_CONF[@TAC-HB_MME_0@]={tac_mme_0_hi} && \\
MME_CONF[@MCC_MME_1@]={networkMCC} && \\
MME_CONF[@MNC3_MME_1@]={networkMNC:03d} && \\
MME_CONF[@TAC-LB_MME_1@]={tac_mme_1_lo} && \\
MME_CONF[@TAC-HB_MME_1@]={tac_mme_1_hi} && \\
for K in "${{!MME_CONF[@]}}"; do sudo egrep -lRZ "$K" $PREFIX | xargs -0 -l sudo sed -i -e "s|$K|${{MME_CONF[$K]}}|g" ; ret=$?;[[ ret -ne 0 ]] && echo "Tried to replace $K with ${{MME_CONF[$K]}}" || true ; done && \\
sudo ./check_mme_s6a_certificate $PREFIX/freeDiameter mme.{networkRealm} >logs/check_mme_s6a_certificate.log 2>&1
""".format(
         gitDirectory           = gitDirectory,
         hssS6a_IPv4Address     = hssS6a_IPv4Address,
         mmeS1C_IfName          = mmeS1C_IfName,
         mmeS1C_IPv4Interface   = mmeS1C_IPv4Interface,
         mmeS11_IfName          = mmeS11_IfName,
         mmeS11_IPv4Interface   = mmeS11_IPv4Interface,
         mmeS10_IfName          = mmeS10_IfName,
         mmeS10_IPv4Interface   = mmeS10_IPv4Interface,

         spwgcS11_IPv4Address   = spwgcS11_IPv4Interface.ip,
         networkRealm           = networkRealm,
         networkMCC             = networkMCC,
         networkMNC             = networkMNC,
         networkOP              = networkOP,
         networkK               = networkK,
         networkIMSIFirst       = networkIMSIFirst,
         networkMSISDNFirst     = networkMSISDNFirst,
         networkUsers           = networkUsers,

         tac_sgw_test_hi        = tac_sgw_test[0:2],
         tac_sgw_test_lo        = tac_sgw_test[2:4],
         tac_sgw_0_hi           = tac_sgw_0[0:2],
         tac_sgw_0_lo           = tac_sgw_0[2:4],
         tac_mme_0_hi           = tac_mme_0[0:2],
         tac_mme_0_lo           = tac_mme_0[2:4],
         tac_mme_1_hi           = tac_mme_1[0:2],
         tac_mme_1_lo           = tac_mme_1[2:4]
      ))
      vduHelper.endBlock()

      # ====== Set up MME service ===========================================
      vduHelper.beginBlock('Setting up MME service')
      vduHelper.configureSystemInfo('MME', 'This is the MME of the SimulaMet OAI VNF!')
      vduHelper.createFileFromString('/lib/systemd/system/mme.service', """\
[Unit]
Description=Mobility Management Entity (MME)
After=ssh.target

[Service]
ExecStart=/bin/sh -c 'exec /usr/local/bin/mme -c /usr/local/etc/oai/mme.conf >>/var/log/mme.log 2>&1'
KillMode=process
Restart=on-failure
RestartPreventExitStatus=255
WorkingDirectory=/home/nornetpp/src/{gitDirectory}/scripts

[Install]
WantedBy=multi-user.target
""".format(gitDirectory = gitDirectory))

      vduHelper.createFileFromString('/home/nornetpp/log',
"""\
#!/bin/sh
tail -f /var/log/mme.log
""", True)

      vduHelper.createFileFromString('/home/nornetpp/restart',
"""\
#!/bin/sh
DIRECTORY=`dirname $0`
sudo service mme restart && $DIRECTORY/log
""", True)
      vduHelper.runInShell('sudo chown nornetpp:nornetpp /home/nornetpp/log /home/nornetpp/restart')
      vduHelper.endBlock()

      # ====== Set up sysstat service =======================================
      vduHelper.installSysStat()

      # ====== Clean up =====================================================
      vduHelper.cleanUp()

      message = vduHelper.endBlock()
      function_set( { 'outout': message } )
      set_flag('mmecharm.configured-mme')
   except:
      message = vduHelper.endBlockInException()
      function_fail(message)
   finally:
      clear_flag('actions.configure-mme')


# ###### restart-mme function ###############################################
@when('actions.restart-mme')
@when('mmecharm.configured-mme')
def restart_mme():
   vduHelper.beginBlock('restart_mme')
   try:

      vduHelper.runInShell('sudo service mme restart')

      message = vduHelper.endBlock()
      function_set( { 'outout': message } )
   except:
      message = vduHelper.endBlockInException()
      function_fail(message)
   finally:
      clear_flag('actions.restart-mme')



# ###########################################################################
# #### SPGW-C Charm functions                                            ####
# ###########################################################################

# ###### Installation #######################################################
@when('sshproxy.configured')
@when_not('spgwccharm.installed')
def install_spgwccharm_proxy_charm():
   set_flag('spgwccharm.installed')
   vduHelper.setStatus('install_spgwccharm_proxy_charm: SSH proxy charm is READY')


# ###### prepare-spgwc-build function #######################################
@when('actions.prepare-spgwc-build')
@when('spgwccharm.installed')
@when_not('spgwccharm.prepared-spgwc-build')
def prepare_spgwc_build():
   vduHelper.beginBlock('prepare_spgwc_build')
   try:

      # ====== Get SPGW-C parameters ========================================
      # For a documentation of the installation procedure, see:
      # https://github.com/simula/openairinterface-openair-cn-cups/wiki/OpenAirSoftwareSupport#install-spgw-c

      gitRepository     = function_get('spgwc-git-repository')
      gitCommit         = function_get('spgwc-git-commit')
      gitDirectory      = 'openair-spgwc'

      # Prepare network configurations:
      spgwcS11_IfName   = 'ens5'
      spgwcSXab_IfName  = 'ens4'
      configurationS11  = vduHelper.makeInterfaceConfiguration(spgwcS11_IfName,  IPv4Interface('0.0.0.0/0'))
      configurationSXab = vduHelper.makeInterfaceConfiguration(spgwcSXab_IfName, IPv4Interface('0.0.0.0/0'))

      # S5S8 dummy interfaces:
      spgwcS5S8_SGW_IfName  = 'dummy0'
      configurationS5S8_SGW = vduHelper.makeInterfaceConfiguration(spgwcS5S8_SGW_IfName, IPv4Interface('172.58.58.102/24'), createDummy = True)
      spgwcS5S8_PGW_IfName  = 'dummy1'
      configurationS5S8_PGW = vduHelper.makeInterfaceConfiguration(spgwcS5S8_PGW_IfName, IPv4Interface('172.58.58.101/24'), createDummy = True)

      # ====== Prepare system ===============================================
      vduHelper.beginBlock('Preparing system')
      vduHelper.configureInterface(spgwcS11_IfName,       configurationS11,       61)
      vduHelper.configureInterface(spgwcSXab_IfName,      configurationSXab,      62)
      vduHelper.configureInterface(spgwcS5S8_SGW_IfName,  configurationS5S8_SGW,  63)
      vduHelper.configureInterface(spgwcS5S8_PGW_IfName,  configurationS5S8_PGW,  64)
      vduHelper.testNetworking()
      vduHelper.waitForPackageUpdatesToComplete()
      vduHelper.endBlock()

      # ====== Prepare sources ==============================================
      vduHelper.beginBlock('Preparing sources')
      vduHelper.fetchGitRepository(gitDirectory, gitRepository, gitCommit)
      vduHelper.endBlock()


      message = vduHelper.endBlock()
      function_set( { 'outout': message } )
      set_flag('spgwccharm.prepared-spgwc-build')
   except:
      message = vduHelper.endBlockInException()
      function_fail(message)
   finally:
      clear_flag('actions.prepare-spgwc-build')


# ###### configure-spgwc function ###########################################
@when('actions.configure-spgwc')
@when('spgwccharm.prepared-spgwc-build')
def configure_spgwc():
   vduHelper.beginBlock('configure_spgwc')
   try:

      # ====== Get SPGW-C parameters ========================================
      # For a documentation of the installation procedure, see:
      # https://github.com/simula/openairinterface-openair-cn-cups/wiki/OpenAirSoftwareSupport#install-spgw-c

      gitDirectory         = 'openair-spgwc'

      networkRealm         = function_get('network-realm')
      networkDNS1_IPv4     = IPv4Address(function_get('network-ipv4-dns1'))
      networkDNS2_IPv4     = IPv4Address(function_get('network-ipv4-dns2'))

      # Prepare network configurations:
      spgwcSXab_IfName     = 'ens4'
      spgwcS11_IfName      = 'ens5'
      spgwcS5S8_SGW_IfName = 'dummy0'
      spgwcS5S8_PGW_IfName = 'dummy1'

      # ====== Build SPGW-C dependencies ====================================
      vduHelper.beginBlock('Building SPGW-C dependencies')
      vduHelper.executeFromString("""\
export MAKEFLAGS="-j`nproc`" && \\
cd /home/nornetpp/src/{gitDirectory}/build/scripts && \\
mkdir -p logs && \\
./build_spgwc -I -f >logs/build_spgwc-1.log 2>&1
""".format(gitDirectory = gitDirectory))
      vduHelper.endBlock()

      # ====== Build SPGW-C itself ==========================================
      vduHelper.beginBlock('Building SPGW-C itself')
      vduHelper.executeFromString("""\
export MAKEFLAGS="-j`nproc`" && \\
cd /home/nornetpp/src/{gitDirectory}/build/scripts && \\
./build_spgwc -c -V -b Debug -j >logs/build_spgwc-2.log 2>&1
""".format(gitDirectory = gitDirectory))
      vduHelper.endBlock()

      # ====== Configure SPGW-C =============================================
      vduHelper.beginBlock('Configuring SPGW-C')
      vduHelper.executeFromString("""\
cd /home/nornetpp/src/{gitDirectory}/build/scripts && \\
INSTANCE=1 && \\
PREFIX='/usr/local/etc/oai' && \\
sudo mkdir -m 0777 -p $PREFIX && \\
sudo cp ../../etc/spgw_c.conf  $PREFIX && \\
declare -A SPGWC_CONF && \\
SPGWC_CONF[@INSTANCE@]=$INSTANCE && \\
SPGWC_CONF[@PREFIX@]=$PREFIX && \\
SPGWC_CONF[@PID_DIRECTORY@]='/var/run' && \\
SPGWC_CONF[@SGW_INTERFACE_NAME_FOR_S11@]='{spgwcS11_IfName}' && \\
SPGWC_CONF[@SGW_INTERFACE_NAME_FOR_S5_S8_CP@]='{spgwcS5S8_SGW_IfName}' && \\
SPGWC_CONF[@PGW_INTERFACE_NAME_FOR_S5_S8_CP@]='{spgwcS5S8_PGW_IfName}' && \\
SPGWC_CONF[@PGW_INTERFACE_NAME_FOR_SX@]='{spgwcSXab_IfName}' && \\
SPGWC_CONF[@DEFAULT_DNS_IPV4_ADDRESS@]='{networkDNS1_IPv4}' && \\
SPGWC_CONF[@DEFAULT_DNS_SEC_IPV4_ADDRESS@]='{networkDNS2_IPv4}' && \\
SPGWC_CONF[@DEFAULT_APN@]='default.{networkRealm}' && \\
for K in "${{!SPGWC_CONF[@]}}"; do sudo egrep -lRZ "$K" $PREFIX | xargs -0 -l sudo sed -i -e "s|$K|${{SPGWC_CONF[$K]}}|g" ; ret=$?;[[ ret -ne 0 ]] && echo "Tried to replace $K with ${{SPGWC_CONF[$K]}}" || true ; done && \\
sudo sed -e "s/APN_NI = \\"default\\"/APN_NI = \\"default.{networkRealm}\\"/g" -i /usr/local/etc/oai/spgw_c.conf && \\
sudo sed -e "s/APN_NI = \\"apn1\\"/APN_NI = \\"internet.{networkRealm}\\"/g" -i /usr/local/etc/oai/spgw_c.conf
""".format(
         gitDirectory         = gitDirectory,
         networkRealm         = networkRealm,
         networkDNS1_IPv4     = networkDNS1_IPv4,
         networkDNS2_IPv4     = networkDNS2_IPv4,
         spgwcSXab_IfName     = spgwcSXab_IfName,
         spgwcS11_IfName      = spgwcS11_IfName,
         spgwcS5S8_SGW_IfName = spgwcS5S8_SGW_IfName,
         spgwcS5S8_PGW_IfName = spgwcS5S8_PGW_IfName
      ))
      vduHelper.endBlock()


      # ====== Set up SPGW-C service ========================================
      vduHelper.beginBlock('Setting up SPGW-C service')
      vduHelper.configureSystemInfo('SPGW-C', 'This is the SPGW-C of the SimulaMet OAI VNF!')
      vduHelper.createFileFromString('/lib/systemd/system/spgwc.service', """\
[Unit]
Description=Serving and Packet Data Network Gateway -- Control Plane (SPGW-C)
After=ssh.target

[Service]
ExecStart=/bin/sh -c 'exec /usr/local/bin/spgwc -c /usr/local/etc/oai/spgw_c.conf -o >>/var/log/spgwc.log 2>&1'
KillMode=process
Restart=on-failure
RestartPreventExitStatus=255
WorkingDirectory=/home/nornetpp/src/{gitDirectory}/build/scripts

[Install]
WantedBy=multi-user.target
""".format(gitDirectory = gitDirectory))

      vduHelper.createFileFromString('/home/nornetpp/log',
"""\
#!/bin/sh
tail -f /var/log/spgwc.log
""", True)

      vduHelper.createFileFromString('/home/nornetpp/restart',
"""\
#!/bin/sh
DIRECTORY=`dirname $0`
sudo service spgwc restart && $DIRECTORY/log
""", True)
      vduHelper.runInShell('sudo chown nornetpp:nornetpp /home/nornetpp/log /home/nornetpp/restart')
      vduHelper.endBlock()

      # ====== Set up sysstat service =======================================
      vduHelper.installSysStat()

      # ====== Clean up =====================================================
      vduHelper.cleanUp()

      message = vduHelper.endBlock()
      function_set( { 'outout': message } )
      set_flag('spgwccharm.configured-spgwc')
   except:
      message = vduHelper.endBlockInException()
      function_fail(message)
   finally:
      clear_flag('actions.configure-spgwc')


# ###### restart-spgwc function #############################################
@when('actions.restart-spgwc')
@when('spgwccharm.configured-spgwc')
def restart_spgwc():
   vduHelper.beginBlock('restart_spgwc')
   try:

      vduHelper.runInShell('sudo service spgwc restart')

      message = vduHelper.endBlock()
      function_set( { 'outout': message } )
   except:
      message = vduHelper.endBlockInException()
      function_fail(message)
   finally:
      clear_flag('actions.restart-spgwc')



# ###########################################################################
# #### SPGW-U Charm functions                                            ####
# ###########################################################################

# ###### Installation #######################################################
@when('sshproxy.configured')
@when_not('spgwucharm.installed')
def install_spgwucharm_proxy_charm():
   set_flag('spgwucharm.installed')
   vduHelper.setStatus('install_spgwucharm_proxy_charm: SSH proxy charm is READY')


# ###### prepare-spgwu-build function #######################################
@when('actions.prepare-spgwu-build')
@when('spgwucharm.installed')
@when_not('spgwucharm.prepared-spgwu-build')
def prepare_spgwu_build():
   vduHelper.beginBlock('prepare_spgwu_build')
   try:

      # ====== Get SPGW-U parameters ========================================
      # For a documentation of the installation procedure, see:
      # https://github.com/simula/openairinterface-openair-cn-cups/wiki/OpenAirSoftwareSupport#install-spgw-u

      gitRepository          = function_get('spgwu-git-repository')
      gitCommit              = function_get('spgwu-git-commit')
      gitDirectory           = 'openair-spgwu-tiny'

      spgwuS1U_IPv4Interface = IPv4Interface(function_get('spgwu-S1U-ipv4-interface'))
      spgwuS1U_IPv4Gateway   = IPv4Address(function_get('spgwu-S1U-ipv4-gateway'))

      spgwuSGi_IPv4Interface = IPv4Interface(function_get('spgwu-SGi-ipv4-interface'))
      spgwuSGi_IPv4Gateway   = IPv4Address(function_get('spgwu-SGi-ipv4-gateway'))
      if function_get('spgwu-SGi-ipv6-interface') == '':
         spgwuSGi_IPv6Interface = None
      else:
         spgwuSGi_IPv6Interface = IPv6Interface(function_get('spgwu-SGi-ipv6-interface'))
      if function_get('spgwu-SGi-ipv6-gateway') == '':
         spgwuSGi_IPv6Gateway = None
      else:
         spgwuSGi_IPv6Gateway = IPv6Address(function_get('spgwu-SGi-ipv6-gateway'))

      # Prepare network configurations:
      spgwuSXab_IfName       = 'ens4'
      spgwuS1U_IfName        = 'ens5'
      spgwuSGi_IfName        = 'ens6'

      configurationSXab = vduHelper.makeInterfaceConfiguration(spgwuSXab_IfName, IPv4Interface('0.0.0.0/0'), metric=261)
      configurationS1U  = vduHelper.makeInterfaceConfiguration(spgwuS1U_IfName, spgwuS1U_IPv4Interface, spgwuS1U_IPv4Gateway, metric=262)
      configurationSGi  = vduHelper.makeInterfaceConfiguration(spgwuSGi_IfName, spgwuSGi_IPv4Interface, spgwuSGi_IPv4Gateway,
                                                               spgwuSGi_IPv6Interface, spgwuSGi_IPv6Gateway,
                                                               metric=200, pdnInterface = 'pdn')


      # ====== Prepare system ===============================================
      vduHelper.beginBlock('Preparing system')
      vduHelper.configureInterface(spgwuSXab_IfName, configurationSXab, 61)
      vduHelper.configureInterface(spgwuS1U_IfName,  configurationS1U,  62)
      vduHelper.configureInterface(spgwuSGi_IfName,  configurationSGi,  63)
      vduHelper.testNetworking()
      vduHelper.waitForPackageUpdatesToComplete()
      vduHelper.endBlock()

      # ====== Prepare sources ==============================================
      vduHelper.beginBlock('Preparing sources')
      vduHelper.fetchGitRepository(gitDirectory, gitRepository, gitCommit)
      vduHelper.endBlock()


      message = vduHelper.endBlock()
      function_set( { 'outout': message } )
      set_flag('spgwucharm.prepared-spgwu-build')
   except:
      message = vduHelper.endBlockInException()
      function_fail(message)
   finally:
      clear_flag('actions.prepare-spgwu-build')


# ###### configure-spgwu function ###########################################
@when('actions.configure-spgwu')
@when('spgwucharm.prepared-spgwu-build')
def configure_spgwu():
   vduHelper.beginBlock('configure_spgwu')
   try:

      # ====== Get SPGW-U parameters ========================================
      # For a documentation of the installation procedure, see:
      # https://github.com/simula/openairinterface-openair-cn-cups/wiki/OpenAirSoftwareSupport#install-spgw-u

      gitDirectory     = 'openair-spgwu-tiny'

      spgwuSXab_IfName = 'ens4'
      spgwuS1U_IfName  = 'ens5'
      spgwuSGi_IfName  = 'ens6'

      spgwcListString  = function_get('spgwu-spgwc-list').split(',')
      spgwcList        = ''
      for spgwc in spgwcListString:
         spgwcAddress = IPv4Address(spgwc)
         if len(spgwcList) > 0:
            spgwcList = spgwcList + ', '
         spgwcList = spgwcList + '{{ IPV4_ADDRESS=\\\\\\"{spgwcAddress}\\\\\\"; }}'.format(spgwcAddress = str(spgwcAddress))


      # ====== Build SPGW-U dependencies ====================================
      vduHelper.beginBlock('Building SPGW-U dependencies')
      vduHelper.executeFromString("""\
export MAKEFLAGS="-j`nproc`" && \\
cd /home/nornetpp/src/{gitDirectory}/build/scripts && \\
mkdir -p logs && \\
./build_spgwu -I -f >logs/build_spgwu-1.log 2>&1""".format(gitDirectory = gitDirectory))
      vduHelper.endBlock()

      # ====== Build SPGW-U itself ==========================================
      vduHelper.beginBlock('Building SPGW-U itself')
      vduHelper.executeFromString("""\
export MAKEFLAGS="-j`nproc`" && \\
cd /home/nornetpp/src/{gitDirectory}/build/scripts && \\
./build_spgwu -c -V -b Debug -j >logs/build_spgwu-2.log 2>&1""".format(gitDirectory = gitDirectory))
      vduHelper.endBlock()

      # ====== Configure SPGW-U =============================================
      vduHelper.beginBlock('Configuring SPGW-U')
      vduHelper.executeFromString("""\
cd /home/nornetpp/src/{gitDirectory}/build/scripts && \\
INSTANCE=1 && \\
PREFIX='/usr/local/etc/oai' && \\
sudo mkdir -m 0777 -p $PREFIX && \\
sudo cp ../../etc/spgw_u.conf  $PREFIX && \\
declare -A SPGWU_CONF && \\
SPGWU_CONF[@INSTANCE@]=$INSTANCE && \\
SPGWU_CONF[@PREFIX@]=$PREFIX && \\
SPGWU_CONF[@PID_DIRECTORY@]='/var/run' && \\
SPGWU_CONF[@SGW_INTERFACE_NAME_FOR_S1U_S12_S4_UP@]='{spgwuS1U_IfName}' && \\
SPGWU_CONF[@SGW_INTERFACE_NAME_FOR_SX@]='{spgwuSXab_IfName}' && \\
SPGWU_CONF[@SGW_INTERFACE_NAME_FOR_SGI@]='{spgwuSGi_IfName}' && \\
for K in "${{!SPGWU_CONF[@]}}"; do sudo egrep -lRZ "$K" $PREFIX | xargs -0 -l sudo sed -i -e "s|$K|${{SPGWU_CONF[$K]}}|g" ; ret=$?;[[ ret -ne 0 ]] && echo "Tried to replace $K with ${{SPGWU_CONF[$K]}}" || true ; done && \\
sudo sed -e "s/{{.*IPV4_ADDRESS=\\"192.168.160.100|\\".*;.*}}\|{{.*IPV4_ADDRESS=\\"@SPGWC0_IP_ADDRESS@\\".*;.*}}/{spgwcList}/g" -i /usr/local/etc/oai/spgw_u.conf""".format(
         gitDirectory      = gitDirectory,
         spgwuSXab_IfName  = spgwuSXab_IfName,
         spgwuS1U_IfName   = spgwuS1U_IfName,
         spgwuSGi_IfName   = spgwuSGi_IfName,
         spgwcList         = spgwcList
      ))
      vduHelper.endBlock()


      # ====== Configure HENCSAT QoS Setup ==================================
      vduHelper.beginBlock('Configuring QoS Setup')
      vduHelper.runInShell('sudo mkdir -p /etc/hencsat')
      vduHelper.createFileFromString('/etc/hencsat/hencsat-router.conf',
"""# HENCSAT Router Configuration

ROUTER_INTERFACE_LEFT=ens6
ROUTER_INTERFACE_RIGHT=pdn
""")
      vduHelper.aptInstallPackages([ 'hencsat-router' ], False)
      vduHelper.endBlock()


      # ====== Set up SPGW-U service ========================================
      vduHelper.beginBlock('Setting up SPGW-U service')
      vduHelper.configureSystemInfo('SPGW-U', 'This is the SPGW-U of the SimulaMet OAI VNF!')
      vduHelper.createFileFromString('/lib/systemd/system/spgwu.service', """\
[Unit]
Description=Serving and Packet Data Network Gateway -- User Plane (SPGW-U)
After=ssh.target

[Service]
ExecStart=/bin/sh -c 'exec /usr/local/bin/spgwu -c /usr/local/etc/oai/spgw_u.conf -o >>/var/log/spgwu.log 2>&1'
KillMode=process
Restart=on-failure
RestartPreventExitStatus=255
WorkingDirectory=/home/nornetpp/src/{gitDirectory}/build/scripts

[Install]
WantedBy=multi-user.target
""".format(gitDirectory = gitDirectory))

      vduHelper.createFileFromString('/home/nornetpp/log',
"""\
#!/bin/sh
tail -f /var/log/spgwu.log
""", True)

      vduHelper.createFileFromString('/home/nornetpp/restart',
"""\
#!/bin/sh
DIRECTORY=`dirname $0`
sudo service spgwu restart && sleep 5 && sudo service hencsat-router restart && $DIRECTORY/log
""", True)
      vduHelper.runInShell('sudo chown nornetpp:nornetpp /home/nornetpp/log /home/nornetpp/restart')
      vduHelper.endBlock()

      # ====== Set up sysstat service =======================================
      vduHelper.installSysStat()

      # ====== Clean up =====================================================
      vduHelper.cleanUp()

      message = vduHelper.endBlock()
      function_set( { 'outout': message } )
      set_flag('spgwucharm.configured-spgwu')
   except:
      message = vduHelper.endBlockInException()
      function_fail(message)
   finally:
      clear_flag('actions.configure-spgwu')


# ###### restart-spgwu function #############################################
@when('actions.restart-spgwu')
@when('spgwucharm.configured-spgwu')
def restart_spgwu():
   vduHelper.beginBlock('restart_spgwu')
   try:

      vduHelper.runInShell('sudo service spgwu restart')

      message = vduHelper.endBlock()
      function_set( { 'outout': message } )
   except:
      message = vduHelper.endBlockInException()
      function_fail(message)
   finally:
      clear_flag('actions.restart-spgwu')



# ###########################################################################
# #### FlexRAN Charm functions                                           ####
# ###########################################################################

# ###### Installation #######################################################
@when('sshproxy.configured')
@when_not('flexrancharm.installed')
def install_flexrancharm_proxy_charm():
   set_flag('flexrancharm.installed')
   vduHelper.setStatus('install_flexrancharm_proxy_charm: SSH proxy charm is READY')


# ###### prepare-flexran-build function #####################################
@when('actions.prepare-flexran-build')
@when('flexrancharm.installed')
@when_not('flexrancharm.prepared-flexran-build')
def prepare_flexran_build():
   vduHelper.beginBlock('prepare_flexran_build')
   try:

      # ====== Get FlexRAN parameters ===========================================
      # For a documentation of the installation procedure, see:
      # https://gitlab.eurecom.fr/mosaic5g/mosaic5g/-/wikis/tutorials/slicing

      gitName       = function_get('git-name')
      gitEmail      = function_get('git-email')
      gitRepository = function_get('flexran-git-repository')
      gitCommit     = function_get('flexran-git-commit')
      gitDirectory  = 'mosaic5g'

      flexranService_IPv4Interface = IPv4Interface(function_get('flexran-service-ipv4-interface'))
      flexranService_IPv4Gateway   = IPv4Address(function_get('flexran-service-ipv4-gateway'))
      if function_get('flexran-service-ipv6-interface') != '':
         flexranService_IPv6Interface = IPv6Interface(function_get('flexran-service-ipv6-interface'))
      else:
         flexranService_IPv6Interface = None
      if function_get('flexran-service-ipv6-gateway') != '':
         flexranService_IPv6Gateway   = IPv6Address(function_get('flexran-service-ipv6-gateway'))
      else:
         flexranService_IPv6Gateway = None

      # Prepare network configuration:
      flexranService_IfName = 'ens4'
      configurationService = vduHelper.makeInterfaceConfiguration(flexranService_IfName,
                                                                  flexranService_IPv4Interface, flexranService_IPv4Gateway,
                                                                  flexranService_IPv6Interface, flexranService_IPv6Gateway)

      # ====== Prepare system ===============================================
      vduHelper.beginBlock('Preparing system')
      vduHelper.configureGit(gitName, gitEmail)
      vduHelper.configureInterface(flexranService_IfName, configurationService, 61)
      vduHelper.testNetworking()
      vduHelper.waitForPackageUpdatesToComplete()
      vduHelper.endBlock()

      # ====== Prepare sources ==============================================
      vduHelper.beginBlock('Preparing sources')
      vduHelper.fetchGitRepository(gitDirectory, gitRepository, gitCommit)
      vduHelper.executeFromString("""\
cd /home/nornetpp/src/{gitDirectory} && \\
git submodule init && \\
git submodule update flexran
""".format(gitDirectory = gitDirectory))
      vduHelper.endBlock()


      message = vduHelper.endBlock()
      function_set( { 'outout': message } )
      set_flag('flexrancharm.prepared-flexran-build')
   except:
      message = vduHelper.endBlockInException()
      function_fail(message)
   finally:
      clear_flag('actions.prepare-flexran-build')


# ###### configure-flexran function #########################################
@when('actions.configure-flexran')
@when('flexrancharm.prepared-flexran-build')
def configure_flexran():
   vduHelper.beginBlock('configure_flexran')
   try:

      # ====== Get FlexRAN parameters =======================================
      # For a documentation of the installation procedure, see:
      # https://gitlab.eurecom.fr/mosaic5g/mosaic5g/-/wikis/tutorials/slicing

      gitDirectory = 'mosaic5g'

      # ====== Build FlexRAN ================================================
      vduHelper.beginBlock('Building FlexRAN itself')
      vduHelper.executeFromString("""\
export MAKEFLAGS="-j`nproc`" && \\
cd /home/nornetpp/src/{gitDirectory} && \\
mkdir -p logs && \\
./build_m5g -f >logs/build_flexran.log 2>&1
""".format(gitDirectory = gitDirectory))
      vduHelper.endBlock()

      # ====== Configure FlexRAN ================================================
      vduHelper.beginBlock('Configuring FlexRAN')
      vduHelper.executeFromString("""\
cd /home/nornetpp/src/{gitDirectory}/flexran
""".format(gitDirectory = gitDirectory))
      vduHelper.endBlock()

      # ====== Set up FlexRAN service ===========================================
      vduHelper.beginBlock('Setting up FlexRAN service')
      vduHelper.configureSystemInfo('FlexRAN Controller', 'This is the FlexRAN Controller of the SimulaMet FlexRAN VNF!')
      vduHelper.createFileFromString('/lib/systemd/system/flexran.service', """\
[Unit]
Description=FlexRAN Controller
After=ssh.target

[Service]
ExecStart=/bin/sh -c 'exec /usr/bin/env FLEXRAN_RTC_HOME=/home/nornetpp/src/{gitDirectory}/flexran FLEXRAN_RTC_EXEC=/home/nornetpp/src/{gitDirectory}/flexran/build ./build/rt_controller -c log_config/basic_log >>/var/log/flexran.log 2>&1'
KillMode=process
Restart=on-failure
RestartPreventExitStatus=255
WorkingDirectory=/home/nornetpp/src/{gitDirectory}/flexran

[Install]
WantedBy=multi-user.target
""".format(gitDirectory = gitDirectory))

      vduHelper.createFileFromString('/home/nornetpp/log',
"""\
#!/bin/sh
tail -f /var/log/flexran.log
""", True)

      vduHelper.createFileFromString('/home/nornetpp/restart',
"""\
#!/bin/sh
DIRECTORY=`dirname $0`
sudo service flexran restart && $DIRECTORY/log
""", True)
      vduHelper.runInShell('sudo chown nornetpp:nornetpp /home/nornetpp/log /home/nornetpp/restart')
      vduHelper.endBlock()

      # ====== Set up sysstat service =======================================
      vduHelper.installSysStat()

      # ====== Clean up =====================================================
      vduHelper.cleanUp()

      message = vduHelper.endBlock()
      function_set( { 'outout': message } )
      set_flag('flexrancharm.configured-flexran')
   except:
      message = vduHelper.endBlockInException()
      function_fail(message)
   finally:
      clear_flag('actions.configure-flexran')


# ###### restart-flexran function ###############################################
@when('actions.restart-flexran')
@when('flexrancharm.configured-flexran')
def restart_flexran():
   vduHelper.beginBlock('restart_flexran')
   try:

      vduHelper.runInShell('sudo service flexran restart')

      message = vduHelper.endBlock()
      function_set( { 'outout': message } )
   except:
      message = vduHelper.endBlockInException()
      function_fail(message)
   finally:
      clear_flag('actions.restart-flexran')



# ###########################################################################
# #### P4-OvS Charm functions                                           ####
# ###########################################################################

# ###### Installation #######################################################
@when('sshproxy.configured')
@when_not('p4ovscharm.installed')
def install_p4ovscharm_proxy_charm():
   set_flag('p4ovscharm.installed')
   vduHelper.setStatus('install_p4ovscharm_proxy_charm: SSH proxy charm is READY')


# ###### prepare-p4ovs-build function #####################################
@when('actions.prepare-p4ovs-build')
@when('p4ovscharm.installed')
@when_not('p4ovscharm.prepared-p4ovs-build')
def prepare_p4ovs_build():
   vduHelper.beginBlock('prepare_p4ovs_build')
   try:

      # ====== Get P4-OvS parameters ===========================================
      # For a documentation of the installation procedure, see:
      # https://gitlab.eurecom.fr/mosaic5g/mosaic5g/-/wikis/tutorials/slicing

      gitRepository = function_get('p4ovs-git-repository')
      gitCommit     = function_get('p4ovs-git-commit')
      gitDirectory  = 'P4-OvS'

      # ====== Prepare system ===============================================
      vduHelper.beginBlock('Preparing system')
      vduHelper.testNetworking()
      vduHelper.waitForPackageUpdatesToComplete()
      vduHelper.aptInstallPackages([
         'automake',
         'bison',
         'cmake',
         'flex',
         'g++',
         'libboost-all-dev',
         'libevent-dev',
         'libgc-dev',
         'libgmp-dev',
         'libgrpc++-dev',
         'libgrpc-dev',
         'libjudy-dev',
         'libnanomsg-dev',
         'libpcap-dev',
         'libprotobuf-dev',
         'libssl-dev',
         'libtool',
         'pkg-config',
         'protobuf-compiler',
         'protobuf-compiler-grpc',
         'python3-dev',
         'python3-pip'
      ])
      vduHelper.pipInstallPackages([ 'nnpy' ])
      vduHelper.endBlock()

      # ====== Prepare sources ==============================================
      vduHelper.beginBlock('Preparing sources')
      vduHelper.fetchGitRepository(gitDirectory, gitRepository, gitCommit)
      vduHelper.executeFromString("""\
cd /home/nornetpp/src/{gitDirectory} && \\
git remote add upstream https://github.com/osinstom/P4-OvS.git""".format(gitDirectory = gitDirectory))
      vduHelper.endBlock()


      message = vduHelper.endBlock()
      function_set( { 'outout': message } )
      set_flag('p4ovscharm.prepared-p4ovs-build')
   except:
      message = vduHelper.endBlockInException()
      function_fail(message)
   finally:
      clear_flag('actions.prepare-p4ovs-build')


# ###### configure-thrift function ##########################################
@when('actions.configure-thrift')
@when('p4ovscharm.prepared-p4ovs-build')
def configure_thrift():
   vduHelper.beginBlock('configure_thrift')
   try:

      # ====== Build Thrift =================================================
      vduHelper.beginBlock('Building Thrift')
      vduHelper.executeFromString("""\
cd /home/nornetpp/src && \\
git clone https://github.com/apache/thrift && \\
cd thrift && \\
git checkout v0.13.0 && \\
./bootstrap.sh && \\
./configure --prefix=/usr && \\
make && \\
sudo make install""")
      vduHelper.endBlock()

      message = vduHelper.endBlock()
      function_set( { 'outout': message } )
      set_flag('p4ovscharm.configured-thrift')
   except:
      message = vduHelper.endBlockInException()
      function_fail(message)
   finally:
      clear_flag('actions.configure-thrift')


# ###### configure-pi function ##############################################
@when('actions.configure-pi')
@when('p4ovscharm.configured-thrift')
def configure_pi():
   vduHelper.beginBlock('configure_pi')
   try:

      # ====== Build PI =====================================================
      vduHelper.beginBlock('Building PI')
      vduHelper.executeFromString("""\
cd /home/nornetpp/src && \\
git clone https://github.com/osinstom/PI && \\
cd PI && \\
git checkout p4-ovs && \\
git submodule update --init && \\
./autogen.sh && \\
./configure --prefix=/usr --with-proto --with-fe-cpp --with-cli --with-internal-rpc --with-gnu-ld && \\
make && \\
sudo make install""")
      vduHelper.endBlock()

      message = vduHelper.endBlock()
      function_set( { 'outout': message } )
      set_flag('p4ovscharm.configured-pi')
   except:
      message = vduHelper.endBlockInException()
      function_fail(message)
   finally:
      clear_flag('actions.configure-pi')


# ###### configure-p4ovs function #########################################
@when('actions.configure-p4ovs')
@when('p4ovscharm.configured-pi')
def configure_p4ovs():
   vduHelper.beginBlock('configure_p4ovs')
   try:

      # ====== Get P4-OvS parameters =======================================
      # For a documentation of the installation procedure, see:
      # https://gitlab.eurecom.fr/mosaic5g/mosaic5g/-/wikis/tutorials/slicing

      gitDirectory = 'P4-OvS'

      # ====== Build P4-OvS ================================================
      vduHelper.beginBlock('Building P4-OvS itself')
      vduHelper.executeFromString("""\
export MAKEFLAGS="-j`nproc`" && \\
cd /home/nornetpp/src/{gitDirectory} && \\
./boot.sh && \\
./configure && \\
make""".format(gitDirectory = gitDirectory))
      vduHelper.endBlock()

      # ====== Configure P4-OvS ================================================
      vduHelper.beginBlock('Configuring P4-OvS')
      vduHelper.executeFromString("""\
cd /home/nornetpp/src/{gitDirectory}/p4ovs
""".format(gitDirectory = gitDirectory))
      vduHelper.endBlock()

      # ====== Set up P4-OvS service ===========================================
      vduHelper.beginBlock('Setting up P4-OvS service')
      vduHelper.configureSystemInfo('P4-OvS Controller', 'This is the P4-OvS Controller of the SimulaMet P4-OvS VNF!')
      vduHelper.createFileFromString('/lib/systemd/system/p4ovs.service', """\
[Unit]
Description=P4-OvS Controller
After=ssh.target

[Service]
ExecStart=/bin/sh -c 'exec /usr/bin/env FLEXRAN_RTC_HOME=/home/nornetpp/src/{gitDirectory}/p4ovs FLEXRAN_RTC_EXEC=/home/nornetpp/src/{gitDirectory}/p4ovs/build ./build/rt_controller -c log_config/basic_log >>/var/log/p4ovs.log 2>&1'
KillMode=process
Restart=on-failure
RestartPreventExitStatus=255
WorkingDirectory=/home/nornetpp/src/{gitDirectory}/p4ovs

[Install]
WantedBy=multi-user.target
""".format(gitDirectory = gitDirectory))

      vduHelper.createFileFromString('/home/nornetpp/log',
"""\
#!/bin/sh
tail -f /var/log/p4ovs.log
""", True)

      vduHelper.createFileFromString('/home/nornetpp/restart',
"""\
#!/bin/sh
DIRECTORY=`dirname $0`
sudo service p4ovs restart && $DIRECTORY/log
""", True)
      vduHelper.runInShell('sudo chown nornetpp:nornetpp /home/nornetpp/log /home/nornetpp/restart')
      vduHelper.endBlock()

      # ====== Set up sysstat service =======================================
      vduHelper.installSysStat()

      # ====== Clean up =====================================================
      vduHelper.cleanUp()

      message = vduHelper.endBlock()
      function_set( { 'outout': message } )
      set_flag('p4ovscharm.configured-p4ovs')
   except:
      message = vduHelper.endBlockInException()
      function_fail(message)
   finally:
      clear_flag('actions.configure-p4ovs')


# ###### restart-p4ovs function ###############################################
@when('actions.restart-p4ovs')
@when('p4ovscharm.configured-p4ovs')
def restart_p4ovs():
   vduHelper.beginBlock('restart_p4ovs')
   try:

      vduHelper.runInShell('sudo service p4ovs restart')

      message = vduHelper.endBlock()
      function_set( { 'outout': message } )
   except:
      message = vduHelper.endBlockInException()
      function_fail(message)
   finally:
      clear_flag('actions.restart-p4ovs')



# ###########################################################################

testAll     = False

testHSS     = False
testMME     = False
testSPGWC   = False
testSPGWU   = False
testFlexRAN = False
testP4OvS   = True

# ------ HSS ----------------------------------------------------------------
if testAll or testHSS:
   install_hsscharm_proxy_charm()
   prepare_cassandra_hss_build()
   configure_cassandra()
   configure_hss()
   restart_hss()

# ------ MME ----------------------------------------------------------------
if testAll or testMME:
   install_mmecharm_proxy_charm()
   prepare_mme_build()
   configure_mme()
   restart_mme()

#------ SPGW-C -------------------------------------------------------------
if testAll or testSPGWC:
   install_spgwccharm_proxy_charm()
   prepare_spgwc_build()
   configure_spgwc()
   restart_spgwc()

# ------ SPGW-U -------------------------------------------------------------
if testAll or testSPGWU:
   install_spgwucharm_proxy_charm()
   prepare_spgwu_build()
   configure_spgwu()
   restart_spgwu()


# ------ FlexRAN Controller -------------------------------------------------
if testAll or testFlexRAN:
   install_flexrancharm_proxy_charm()
   prepare_flexran_build()
   configure_flexran()
   restart_flexran()


# ------ P4OvS Controller ---------------------------------------------------
if testAll or testP4OvS:
   install_p4ovscharm_proxy_charm()
   prepare_p4ovs_build()
   configure_thrift()
   configure_pi()
   configure_p4ovs()
   restart_p4ovs()


# ------ Interface configuration tests --------------------------------------
#spgwuS1U_IPv4Interface = IPv4Interface(function_get('spgwu-S1U-ipv4-interface'))
#spgwuS1U_IPv4Gateway   = IPv4Address(function_get('spgwu-S1U-ipv4-gateway'))

#spgwuSGi_IPv4Interface = IPv4Interface(function_get('spgwu-SGi-ipv4-interface'))
#spgwuSGi_IPv4Gateway   = IPv4Address(function_get('spgwu-SGi-ipv4-gateway'))
#if function_get('spgwu-SGi-ipv6-interface') == '':
   #spgwuSGi_IPv6Interface = None
#else:
   #spgwuSGi_IPv6Interface = IPv6Interface(function_get('spgwu-SGi-ipv6-interface'))
#if function_get('spgwu-SGi-ipv6-gateway') == '':
   #spgwuSGi_IPv6Gateway = None
#else:
   #spgwuSGi_IPv6Gateway = IPv6Address(function_get('spgwu-SGi-ipv6-gateway'))

## Prepare network configurations:
#spgwuSXab_IfName       = 'ens4'
#spgwuS1U_IfName        = 'ens5'
#spgwuSGi_IfName        = 'ens6'

#configurationSXab = vduHelper.makeInterfaceConfiguration(spgwuSXab_IfName, IPv4Interface('0.0.0.0/0'), metric=261)
#vduHelper.configureInterface(spgwuSXab_IfName, configurationSXab)
#configurationS1U  = vduHelper.makeInterfaceConfiguration(spgwuS1U_IfName, spgwuS1U_IPv4Interface, spgwuS1U_IPv4Gateway, metric=262)
#vduHelper.configureInterface(spgwuS1U_IfName, configurationS1U)
#configurationSGi  = vduHelper.makeInterfaceConfiguration(spgwuSGi_IfName, spgwuSGi_IPv4Interface, spgwuSGi_IPv4Gateway,
                                                         #spgwuSGi_IPv6Interface, spgwuSGi_IPv6Gateway,
                                                         #metric=200)
#vduHelper.configureInterface(spgwuSGi_IfName, configurationSGi)

#vduHelper.configureInterface('ens4', vduHelper.makeInterfaceConfiguration('ens4', IPv4Interface('0.0.0.0/0')))
#vduHelper.configureInterface('dummy1', vduHelper.makeInterfaceConfiguration('dummy1',
                             #IPv4Interface('172.58.58.101/24'), createDummy = True))

#vduHelper.executeFromString('date ; echo "This is a test!" ; ls >/tmp/x1.txt')
