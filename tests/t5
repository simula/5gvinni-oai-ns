#!/usr/bin/env python3
# -*- coding: utf-8 -*-


import logging
import logging.config
import os
import sys

#import functools
#import re
#import shlex
import subprocess
import traceback
import ipaddress
#from ipaddress import IPv4Address, IPv4Interface, IPv6Address, IPv6Interface



# ###########################################################################
# #### Helper functions                                                  ####
# ###########################################################################


# ###### Dummy function #####################################################
def clear_flag(flag):
   # Nothing to do!
   pass


# ###### Dummy function #####################################################
def set_flag(flag):
   # Nothing to do!
   pass


# ###### Dummy function #####################################################
def status_set(tag, value):
   # Nothing to do!
   pass


# ###### Dummy function #####################################################
def action_set(values):
   # Nothing to do!
   pass


# ###### Dummy function #####################################################
def action_fail(message):
   # Nothing to do!
   pass


# ###### Dummy decorator ####################################################
def when(*flags):
    def decorator_when(func):
        @functools.wraps(func)
        def wrapper_when(*args, **kwargs):
            return func(*args, **kwargs)
        return wrapper_when
    return decorator_when


# ###### Dummy decorator ####################################################
def when_not(*flags):
    def decorator_when(func):
        @functools.wraps(func)
        def wrapper_when(*args, **kwargs):
            return func(*args, **kwargs)
        return wrapper_when
    return decorator_when



# ###########################################################################
# #### VDUHelper class                                                   ####
# ###########################################################################

class VDUHelper:
   # ###### Constructor #####################################################
   def __init__(self, logFileName):
      # ====== Initialise object ============================================
      self.blockStack = []
      self.lastError  = None

      # ====== Initialise logger ============================================
      loggingConfiguration = {
         'version': 1,
         'handlers': {
            'default': {
               'level':     'DEBUG',
               'class':     'logging.handlers.TimedRotatingFileHandler',
               'formatter': 'standard',
               'filename':  logFileName,
               'when':      'D'
            }
         },
         'formatters': {
            'standard': {
               'format': '%(asctime)s %(levelname)s [PID=%(process)d] %(message)s'
            }
         },
         'root': {
            'level':    'DEBUG',
            'handlers': ['default']
         }
      }
      logging.config.dictConfig(loggingConfiguration)
      self.logger = logging.getLogger(__name__)
      self.logger.debug('Starting')


   # ###### Begin block #####################################################
   def beginBlock(self, label):
      self.blockStack.append(label)
      self.lastError = None

      message = label + ' ...'
      self.logger.debug(message)
      return message


   # ###### End block #######################################################
   def endBlock(self, success = True):
      assert len(self.blockStack) > 0
      label = self.blockStack.pop()

      if success == True:
         message = label + ' completed!'
         self.logger.debug(message)
      else:
         message = label + ' FAILED!'
         self.logger.error(message)
         if self.lastError == None:
            self.lastError = message
         else:
            return message + ' <= ' + self.lastError

      return message


   # ###### Execute command #################################################
   def execute(self, commands):
      #sys.stdout.write('-----------------------------------------------------------------------------\n')
      #sys.stdout.write('time bash -c "' + commands + '"\n')

      print(commands)
      self.logger.debug(commands)
      subprocess.check_call(commands, shell=True)


   # ###### Run shell commands and handle exceptions ########################
   def runInShell(self, commands, raiseExceptionOnError = True):
      try:
         self.execute(commands)
      except:
         message = 'Command execution failed: ' + commands
         self.logger.error(message)
         if raiseExceptionOnError:
            raise
         return False
      else:
         return True


   # ######  Get /etc/network/interfaces setup for interface ###################
   def makeInterfaceConfiguration(self,
                                  interfaceName,
                                  ipv4Interface = ipaddress.IPv4Interface('0.0.0.0/0'),
                                  ipv4Gateway   = None,
                                  ipv6Interface = None,
                                  ipv6Gateway   = None,
                                  metric        = 1,
                                  pdnInterface  = None):

      # NOTE:
      # Double escaping is required for \ and " in "interfaceConfiguration" string!
      # 1. Python
      # 2. bash -c "<command>"
      # That is: $ => \$ ; \ => \\ ; " => \\\"

      interfaceConfiguration = 'auto ' + interfaceName + '\\\\n'

      # ====== Helper function =================================================
      def makePDNRules(pdnInterface, interface, gateway):
         rules = \
            '\\\\tpost-up /bin/ip rule add from ' + str(interface.network) + ' lookup 1000 pref 100\\\\n' + \
            '\\\\tpost-up /bin/ip rule add iif pdn lookup 1000 pref 100\\\\n' + \
            '\\\\tpost-up /bin/ip route add ' + str(interface.network) + ' scope link dev ' + interfaceName + ' table 1000\\\\n' + \
            '\\\\tpost-up /bin/ip route add default via ' + str(gateway) + ' dev ' + interfaceName + ' table 1000\\\\n' + \
            '\\\\tpre-down /bin/ip route del default via ' + str(gateway) + ' dev ' + interfaceName + ' table 1000 || true\\\\n' + \
            '\\\\tpre-down /bin/ip route del ' + str(interface.network) + ' scope link dev ' + interfaceName + ' table 1000 || true\\\\n' + \
            '\\\\tpre-down /bin/ip rule del iif pdn lookup 1000 pref 100 || true\\\\n' + \
            '\\\\tpre-down /bin/ip rule del from ' + str(interface.network) + ' lookup 1000 pref 100 || true\\\\n'
         return rules

      # ====== IPv4 ============================================================
      if ipv4Interface == ipaddress.IPv4Interface('0.0.0.0/0'):
         interfaceConfiguration = interfaceConfiguration + 'iface ' + interfaceName + ' inet dhcp'
      else:
         interfaceConfiguration = interfaceConfiguration + \
            'iface ' + interfaceName + ' inet static\\\\n' + \
            '\\\\taddress ' + str(ipv4Interface.ip)      + '\\\\n' + \
            '\\\\tnetmask ' + str(ipv4Interface.netmask) + '\\\\n'
         if ((ipv4Gateway != None) and (ipv4Gateway != IPv4Address('0.0.0.0'))):
            interfaceConfiguration = interfaceConfiguration + \
               '\\\\tgateway ' + str(ipv4Gateway) + '\\\\n' + \
               '\\\\tmetric '  + str(metric)      + '\\\\n'
         if pdnInterface != None:
            interfaceConfiguration = interfaceConfiguration + makePDNRules(pdnInterface, ipv4Interface, ipv4Gateway)
         interfaceConfiguration = interfaceConfiguration + '\\\\n'

      # ====== IPv6 ============================================================
      if ipv6Interface == None:
         interfaceConfiguration = interfaceConfiguration + \
            '\\\\niface ' + interfaceName + ' inet6 manual\\\\n' + \
            '\\\\tautoconf 0\\\\n'
      elif ipv6Interface == IPv6Interface('::/0'):
         interfaceConfiguration = interfaceConfiguration + \
            '\\\\niface ' + interfaceName + ' inet6 dhcp\\\\n' + \
            '\\\\tautoconf 0\\\\n'
      else:
         interfaceConfiguration = interfaceConfiguration + \
            '\\\\niface ' + interfaceName + ' inet6 static\\\\n' + \
            '\\\\tautoconf 0\\\\n' + \
            '\\\\taddress ' + str(ipv6Interface.ip)                + '\\\\n' + \
            '\\\\tnetmask ' + str(ipv6Interface.network.prefixlen) + '\\\\n'
         if ((ipv6Gateway != None) and (ipv6Gateway != IPv6Address('::'))):
            interfaceConfiguration = interfaceConfiguration + \
               '\\\\tgateway ' + str(ipv6Gateway) + '\\\\n' + \
               '\\\\tmetric '  + str(metric)      + '\\\\n'
         if pdnInterface != None:
            interfaceConfiguration = interfaceConfiguration + makePDNRules(pdnInterface, ipv6Interface, ipv6Gateway)

      return interfaceConfiguration


   # ###### Configuration and activate network interface ####################
   def configureInterface(self, interfaceName, interfaceConfiguration):
      self.beginBlock('Configuring and activating ' + interfaceName)
      commands = """\
echo -e \\\"{interfaceConfiguration}\\\" | sudo tee /etc/network/interfaces.d/61-{interfaceName} && sudo ifup {interfaceName} || true""".format(
         interfaceName          = interfaceName,
         interfaceConfiguration = interfaceConfiguration
      )
      self.runInShell(commands)
      self.endBlock()


   # ###### Touch file ######################################################
   def touchFile(self, fileName):
      self.beginBlock('Touch ' + fileName)

      try:
         commands = """touch {}""".format(fileName)
         self.runInShell(commands)
      except:
         self.endBlock(False)
         raise

      self.endBlock()


   # ###### Test networking #################################################
   def testNetworking(self, destination = ipaddress.IPv4Address('8.8.8.8'), timeout = 60):
      self.beginBlock('Testing networking')

      try:
         commands = """ping -W{timeout} -c3 {destination}""".format(
            destination = str(destination),
            timeout     = timeout
         )
         self.runInShell(commands)
      except:
         self.endBlock(False)
         raise

      self.endBlock()



vduHelper = VDUHelper('test.log')

vduHelper.beginBlock('Preparing sources')
try:

   hssS6a_IfName    = 'ens4'
   configurationS6a = vduHelper.makeInterfaceConfiguration('ens3', ipaddress.IPv4Interface('0.0.0.0/0'))
   #vduHelper.configureInterface('ens3', configurationS6a)
   vduHelper.touchFile('/tmp/touch-test1')
   vduHelper.testNetworking('8.8.8.9', 2)
   vduHelper.endBlock()
except:
   errorMessage = vduHelper.endBlock(False)
   print(errorMessage)
   pass
